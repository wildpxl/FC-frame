"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ethereum = exports.Iotex = exports.LineaEth = exports.ScrollEth = exports.Bera = exports.USDCPolygon = exports.Chainlink = exports.Arbitrum = exports.USDCEth = exports.BaseEth = exports.Avalanche = exports.BNB = exports.Matic = exports.EthereumToken = void 0;
const tslib_1 = require("tslib");
const erc20_1 = tslib_1.__importDefault(require("./erc20"));
const ethereum_1 = tslib_1.__importDefault(require("./ethereum"));
class EthereumToken extends ethereum_1.default {
    constructor(config) {
        super({ name: "ethereum", ticker: "ETH",
            ...config,
            providerUrl: config.providerUrl ?? "https://cloudflare-eth.com/",
        });
    }
}
exports.EthereumToken = EthereumToken;
// todo: overhaul this
function getBoundEth({ name, ticker, providerUrl }) {
    return class EthereumToken extends ethereum_1.default {
        constructor(config) {
            super({ name, ticker,
                ...config,
                providerUrl: config.providerUrl ?? providerUrl,
            });
        }
    };
}
function getBoundERC20({ name, ticker, providerUrl, contractAddress }) {
    return class ERC20Token extends erc20_1.default {
        constructor(config) {
            super({ name, ticker,
                ...config,
                providerUrl: config.providerUrl ?? providerUrl,
                contractAddress: config.opts?.contractAddress ?? contractAddress,
            });
        }
    };
}
// export function MaticBundlerIrys(opts?: EthereumTokenOpts) {
//     return new Builder(Matic).withTokenOptions(opts)
// }
exports.Matic = getBoundEth({ name: "matic", ticker: "MATIC", providerUrl: "https://polygon-rpc.com/" });
// export function BNBBundlerIrys(opts?: EthereumTokenOpts) {
//     return new Builder(getBoundEth({name: "bnb", ticker: "BNB", providerUrl: "https://bsc-dataseed.binance.org/" })).withTokenOptions(opts)
// }
exports.BNB = getBoundEth({ name: "bnb", ticker: "BNB", providerUrl: "https://bsc-dataseed.binance.org/" });
// export function AvalancheBundlerIrys(opts?: EthereumTokenOpts) {
//     return new Builder(getBoundEth({name: "avalanche", ticker: "AVAX", providerUrl: "https://api.avax-test.network/ext/bc/C/rpc/" })).withTokenOptions(opts)
// }
exports.Avalanche = getBoundEth({ name: "avalanche", ticker: "AVAX", providerUrl: "https://api.avax-test.network/ext/bc/C/rpc/" });
// export function BaseEthBundlerIrys(opts?: EthereumTokenOpts) {
//     return new Builder(getBoundEth({name: "base-eth", ticker: "ETH", providerUrl: "https://mainnet.base.org/" })).withTokenOptions(opts)
// }
exports.BaseEth = getBoundEth({ name: "base-eth", ticker: "ETH", providerUrl: "https://mainnet.base.org/" });
// export function USDCEthBundlerIrys(opts?: EthereumTokenOpts) {
//     return new Builder(getBoundERC20({name: "usdc-eth", ticker: "USDC", providerUrl: "https://cloudflare-eth.com/", contractAddress: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48" })).withTokenOptions(opts)
// }
exports.USDCEth = getBoundERC20({ name: "usdc-eth", ticker: "USDC", providerUrl: "https://cloudflare-eth.com/", contractAddress: "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48" });
// export function ArbitrumBundlerIrys(opts?: EthereumTokenOpts) {
//     return new Builder(getBoundEth({name: "arbitrum", ticker: "ETH", providerUrl:"https://arb1.arbitrum.io/rpc/" })).withTokenOptions(opts)
// }
exports.Arbitrum = getBoundEth({ name: "arbitrum", ticker: "ETH", providerUrl: "https://arb1.arbitrum.io/rpc/" });
// export function ChainlinkBundlerIrys(opts?: EthereumTokenOpts) {
//     return new Builder(getBoundERC20({name: "chainlink", ticker: "LINK", providerUrl: "https://main-light.eth.linkpool.io/", contractAddress: "0x514910771AF9Ca656af840dff83E8264EcF986CA" })).withTokenOptions(opts)
// }
exports.Chainlink = getBoundERC20({ name: "chainlink", ticker: "LINK", providerUrl: "https://main-light.eth.linkpool.io/", contractAddress: "0x514910771AF9Ca656af840dff83E8264EcF986CA" });
// export function USDCPolygonBundlerIrys(opts?: EthereumTokenOpts) {
//     return new Builder(getBoundERC20({name: "usdc-polygon", ticker: "USDC", providerUrl:"https://polygon-rpc.com", contractAddress:"0x3c499c542cef5e3811e1192ce70d8cc03d5c3359" })).withTokenOptions(opts)
// }
exports.USDCPolygon = getBoundERC20({ name: "usdc-polygon", ticker: "USDC", providerUrl: "https://polygon-rpc.com", contractAddress: "0x3c499c542cef5e3811e1192ce70d8cc03d5c3359" });
// export function BeraBundlerIrys(opts?: EthereumTokenOpts) {
//     return new Builder(getBoundEth({name: "bera", ticker: "BERA", providerUrl:"https://bartio.rpc.berachain.com/" })).withTokenOptions(opts)
// }
exports.Bera = getBoundEth({ name: "bera", ticker: "BERA", providerUrl: "https://bartio.rpc.berachain.com/" });
// export function ScrollEthBundlerIrys(opts?: EthereumTokenOpts) {
//     return new Builder(getBoundEth({name: "scroll-eth", ticker: "ETH", providerUrl:"https://rpc.scroll.io" })).withTokenOptions(opts)
// }
exports.ScrollEth = getBoundEth({ name: "scroll-eth", ticker: "ETH", providerUrl: "https://rpc.scroll.io" });
// export function LineaEthBundlerIrys(opts?: EthereumTokenOpts) {
//     return new Builder(getBoundEth({name: "linea-eth", ticker: "ETH", providerUrl:"https://rpc.linea.build" })).withTokenOptions(opts)
// }
exports.LineaEth = getBoundEth({ name: "linea-eth", ticker: "ETH", providerUrl: "https://rpc.linea.build" });
// export function IotexBundlerIrys(opts?: EthereumTokenOpts) {
//     return new Builder(getBoundEth({name: "iotex", ticker: "IOTX", providerUrl:"https://babel-api.mainnet.iotex.io/" })).withTokenOptions(opts)
// }
exports.Iotex = getBoundEth({ name: "iotex", ticker: "IOTX", providerUrl: "https://babel-api.mainnet.iotex.io/" });
// export function EthereumBundlerIrys(opts?: EthereumTokenOpts) {
//     // return a builder
//     return new Builder(EthereumToken).withTokenOptions(opts)
// }
exports.Ethereum = EthereumToken;
exports.default = exports.Ethereum;
// export default EthereumBundlerIrys
//# sourceMappingURL=clients.js.map