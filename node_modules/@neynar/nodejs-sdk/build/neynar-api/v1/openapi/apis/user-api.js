"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserApi = exports.UserApiFactory = exports.UserApiFp = exports.UserApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * UserApi - axios parameter creator
 * @export
 */
const UserApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Now deprecated, use [v2/user/bulk](https://docs.neynar.com/reference/user-bulk), find custody address in user obj. Returns the custody address for a given FID
         * @summary DEPRECATED - Fetch the custody address for a given FID
         * @param {number} fid FID of a user
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        custodyAddress: async (fid, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('custodyAddress', 'fid', fid);
            const localVarPath = `/farcaster/custody-address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a list of casts from the protocol in reverse chronological order based on timestamp
         * @summary Fetch Recent Users
         * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
         * @param {number} [limit] Number of results to fetch (default 100, max 1000)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recentUsers: async (viewerFid, limit, cursor, options = {}) => {
            const localVarPath = `/farcaster/recent-users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewerFid'] = viewerFid;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Now deprecated, use [v2/user/bulk](https://docs.neynar.com/reference/user-bulk). Returns metadata about a specific user
         * @summary DEPRECATED - Fetch User Information by FID
         * @param {number} fid FID of a user
         * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        user: async (fid, viewerFid, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('user', 'fid', fid);
            const localVarPath = `/farcaster/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewerFid'] = viewerFid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Now deprecated, use [v2/user/by_username](https://docs.neynar.com/reference/user-by-username-v2) instead. Returns metadata about a specific user
         * @summary DEPRECATED - Fetch User Information by username
         * @param {string} username Username of the user
         * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        userByUsernameV1: async (username, viewerFid, options = {}) => {
            // verify required parameter 'username' is not null or undefined
            (0, common_1.assertParamExists)('userByUsernameV1', 'username', username);
            const localVarPath = `/farcaster/user-by-username`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewerFid'] = viewerFid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Now deprecated. use [/v2/reactions/user](https://docs.neynar.com/reference/reactions-user). Fetch all the liked cast of a User
         * @summary DEPRECATED -- Fetch User Cast Likes
         * @param {number} fid FID of the user
         * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
         * @param {number} [limit] Number of results to fetch (default 25, max 150)
         * @param {string} [cursor] Pagination cursor
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        userCastLikes: async (fid, viewerFid, limit, cursor, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('userCastLikes', 'fid', fid);
            const localVarPath = `/farcaster/user-cast-likes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewerFid'] = viewerFid;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.UserApiAxiosParamCreator = UserApiAxiosParamCreator;
/**
 * UserApi - functional programming interface
 * @export
 */
const UserApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.UserApiAxiosParamCreator)(configuration);
    return {
        /**
         * Now deprecated, use [v2/user/bulk](https://docs.neynar.com/reference/user-bulk), find custody address in user obj. Returns the custody address for a given FID
         * @summary DEPRECATED - Fetch the custody address for a given FID
         * @param {number} fid FID of a user
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async custodyAddress(fid, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.custodyAddress(fid, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserApi.custodyAddress']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch a list of casts from the protocol in reverse chronological order based on timestamp
         * @summary Fetch Recent Users
         * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
         * @param {number} [limit] Number of results to fetch (default 100, max 1000)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recentUsers(viewerFid, limit, cursor, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.recentUsers(viewerFid, limit, cursor, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserApi.recentUsers']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Now deprecated, use [v2/user/bulk](https://docs.neynar.com/reference/user-bulk). Returns metadata about a specific user
         * @summary DEPRECATED - Fetch User Information by FID
         * @param {number} fid FID of a user
         * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async user(fid, viewerFid, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.user(fid, viewerFid, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserApi.user']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Now deprecated, use [v2/user/by_username](https://docs.neynar.com/reference/user-by-username-v2) instead. Returns metadata about a specific user
         * @summary DEPRECATED - Fetch User Information by username
         * @param {string} username Username of the user
         * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async userByUsernameV1(username, viewerFid, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.userByUsernameV1(username, viewerFid, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserApi.userByUsernameV1']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Now deprecated. use [/v2/reactions/user](https://docs.neynar.com/reference/reactions-user). Fetch all the liked cast of a User
         * @summary DEPRECATED -- Fetch User Cast Likes
         * @param {number} fid FID of the user
         * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
         * @param {number} [limit] Number of results to fetch (default 25, max 150)
         * @param {string} [cursor] Pagination cursor
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async userCastLikes(fid, viewerFid, limit, cursor, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.userCastLikes(fid, viewerFid, limit, cursor, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['UserApi.userCastLikes']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.UserApiFp = UserApiFp;
/**
 * UserApi - factory interface
 * @export
 */
const UserApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.UserApiFp)(configuration);
    return {
        /**
         * Now deprecated, use [v2/user/bulk](https://docs.neynar.com/reference/user-bulk), find custody address in user obj. Returns the custody address for a given FID
         * @summary DEPRECATED - Fetch the custody address for a given FID
         * @param {number} fid FID of a user
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        custodyAddress(fid, options) {
            return localVarFp.custodyAddress(fid, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a list of casts from the protocol in reverse chronological order based on timestamp
         * @summary Fetch Recent Users
         * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
         * @param {number} [limit] Number of results to fetch (default 100, max 1000)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recentUsers(viewerFid, limit, cursor, options) {
            return localVarFp.recentUsers(viewerFid, limit, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Now deprecated, use [v2/user/bulk](https://docs.neynar.com/reference/user-bulk). Returns metadata about a specific user
         * @summary DEPRECATED - Fetch User Information by FID
         * @param {number} fid FID of a user
         * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        user(fid, viewerFid, options) {
            return localVarFp.user(fid, viewerFid, options).then((request) => request(axios, basePath));
        },
        /**
         * Now deprecated, use [v2/user/by_username](https://docs.neynar.com/reference/user-by-username-v2) instead. Returns metadata about a specific user
         * @summary DEPRECATED - Fetch User Information by username
         * @param {string} username Username of the user
         * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        userByUsernameV1(username, viewerFid, options) {
            return localVarFp.userByUsernameV1(username, viewerFid, options).then((request) => request(axios, basePath));
        },
        /**
         * Now deprecated. use [/v2/reactions/user](https://docs.neynar.com/reference/reactions-user). Fetch all the liked cast of a User
         * @summary DEPRECATED -- Fetch User Cast Likes
         * @param {number} fid FID of the user
         * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
         * @param {number} [limit] Number of results to fetch (default 25, max 150)
         * @param {string} [cursor] Pagination cursor
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        userCastLikes(fid, viewerFid, limit, cursor, options) {
            return localVarFp.userCastLikes(fid, viewerFid, limit, cursor, options).then((request) => request(axios, basePath));
        },
    };
};
exports.UserApiFactory = UserApiFactory;
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
class UserApi extends base_1.BaseAPI {
    /**
     * Now deprecated, use [v2/user/bulk](https://docs.neynar.com/reference/user-bulk), find custody address in user obj. Returns the custody address for a given FID
     * @summary DEPRECATED - Fetch the custody address for a given FID
     * @param {number} fid FID of a user
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof UserApi
     */
    custodyAddress(fid, options) {
        return (0, exports.UserApiFp)(this.configuration).custodyAddress(fid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a list of casts from the protocol in reverse chronological order based on timestamp
     * @summary Fetch Recent Users
     * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
     * @param {number} [limit] Number of results to fetch (default 100, max 1000)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    recentUsers(viewerFid, limit, cursor, options) {
        return (0, exports.UserApiFp)(this.configuration).recentUsers(viewerFid, limit, cursor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Now deprecated, use [v2/user/bulk](https://docs.neynar.com/reference/user-bulk). Returns metadata about a specific user
     * @summary DEPRECATED - Fetch User Information by FID
     * @param {number} fid FID of a user
     * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof UserApi
     */
    user(fid, viewerFid, options) {
        return (0, exports.UserApiFp)(this.configuration).user(fid, viewerFid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Now deprecated, use [v2/user/by_username](https://docs.neynar.com/reference/user-by-username-v2) instead. Returns metadata about a specific user
     * @summary DEPRECATED - Fetch User Information by username
     * @param {string} username Username of the user
     * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof UserApi
     */
    userByUsernameV1(username, viewerFid, options) {
        return (0, exports.UserApiFp)(this.configuration).userByUsernameV1(username, viewerFid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Now deprecated. use [/v2/reactions/user](https://docs.neynar.com/reference/reactions-user). Fetch all the liked cast of a User
     * @summary DEPRECATED -- Fetch User Cast Likes
     * @param {number} fid FID of the user
     * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
     * @param {number} [limit] Number of results to fetch (default 25, max 150)
     * @param {string} [cursor] Pagination cursor
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof UserApi
     */
    userCastLikes(fid, viewerFid, limit, cursor, options) {
        return (0, exports.UserApiFp)(this.configuration).userCastLikes(fid, viewerFid, limit, cursor, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.UserApi = UserApi;
