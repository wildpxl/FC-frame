"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationsApi = exports.NotificationsApiFactory = exports.NotificationsApiFp = exports.NotificationsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * NotificationsApi - axios parameter creator
 * @export
 */
const NotificationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Gets a list of 15 mentions and replies to the user’s casts in reverse chronological order
         * @summary Fetch mentions and replies
         * @param {number} fid FID of a user
         * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mentionsAndReplies: async (fid, viewerFid, cursor, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('mentionsAndReplies', 'fid', fid);
            const localVarPath = `/farcaster/mentions-and-replies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewerFid'] = viewerFid;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a list of reactions and recasts to the users’s casts in reverse chronological order
         * @summary Fetch reactions and recasts
         * @param {number} fid FID of a user
         * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
         * @param {number} [limit] Number of results to fetch (default 25, max 150)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reactionsAndRecasts: async (fid, viewerFid, limit, cursor, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('reactionsAndRecasts', 'fid', fid);
            const localVarPath = `/farcaster/reactions-and-recasts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (viewerFid !== undefined) {
                localVarQueryParameter['viewerFid'] = viewerFid;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.NotificationsApiAxiosParamCreator = NotificationsApiAxiosParamCreator;
/**
 * NotificationsApi - functional programming interface
 * @export
 */
const NotificationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.NotificationsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Gets a list of 15 mentions and replies to the user’s casts in reverse chronological order
         * @summary Fetch mentions and replies
         * @param {number} fid FID of a user
         * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mentionsAndReplies(fid, viewerFid, cursor, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.mentionsAndReplies(fid, viewerFid, cursor, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['NotificationsApi.mentionsAndReplies']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch a list of reactions and recasts to the users’s casts in reverse chronological order
         * @summary Fetch reactions and recasts
         * @param {number} fid FID of a user
         * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
         * @param {number} [limit] Number of results to fetch (default 25, max 150)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reactionsAndRecasts(fid, viewerFid, limit, cursor, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.reactionsAndRecasts(fid, viewerFid, limit, cursor, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['NotificationsApi.reactionsAndRecasts']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.NotificationsApiFp = NotificationsApiFp;
/**
 * NotificationsApi - factory interface
 * @export
 */
const NotificationsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.NotificationsApiFp)(configuration);
    return {
        /**
         * Gets a list of 15 mentions and replies to the user’s casts in reverse chronological order
         * @summary Fetch mentions and replies
         * @param {number} fid FID of a user
         * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mentionsAndReplies(fid, viewerFid, cursor, options) {
            return localVarFp.mentionsAndReplies(fid, viewerFid, cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a list of reactions and recasts to the users’s casts in reverse chronological order
         * @summary Fetch reactions and recasts
         * @param {number} fid FID of a user
         * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
         * @param {number} [limit] Number of results to fetch (default 25, max 150)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reactionsAndRecasts(fid, viewerFid, limit, cursor, options) {
            return localVarFp.reactionsAndRecasts(fid, viewerFid, limit, cursor, options).then((request) => request(axios, basePath));
        },
    };
};
exports.NotificationsApiFactory = NotificationsApiFactory;
/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
class NotificationsApi extends base_1.BaseAPI {
    /**
     * Gets a list of 15 mentions and replies to the user’s casts in reverse chronological order
     * @summary Fetch mentions and replies
     * @param {number} fid FID of a user
     * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    mentionsAndReplies(fid, viewerFid, cursor, options) {
        return (0, exports.NotificationsApiFp)(this.configuration).mentionsAndReplies(fid, viewerFid, cursor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a list of reactions and recasts to the users’s casts in reverse chronological order
     * @summary Fetch reactions and recasts
     * @param {number} fid FID of a user
     * @param {number} [viewerFid] FID of the user viewing this information, needed for contextual information.
     * @param {number} [limit] Number of results to fetch (default 25, max 150)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     */
    reactionsAndRecasts(fid, viewerFid, limit, cursor, options) {
        return (0, exports.NotificationsApiFp)(this.configuration).reactionsAndRecasts(fid, viewerFid, limit, cursor, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.NotificationsApi = NotificationsApi;
