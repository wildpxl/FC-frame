"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VerificationApi = exports.VerificationApiFactory = exports.VerificationApiFp = exports.VerificationApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * VerificationApi - axios parameter creator
 * @export
 */
const VerificationApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Now deprecated. Use [v2/user/bulk-by-address](https://docs.neynar.com/reference/user-bulk-by-address). Checks if a given Ethereum address has a Farcaster user associated with it. Note: if an address is associated with multiple users, the API will return the user who most recently published a verification with the address (based on when Warpcast received the proof, not a self-reported timestamp).
         * @summary DEPRECATED - Fetch user for a given ethereum address
         * @param {string} address
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        userByVerification: async (address, options = {}) => {
            // verify required parameter 'address' is not null or undefined
            (0, common_1.assertParamExists)('userByVerification', 'address', address);
            const localVarPath = `/farcaster/user-by-verification`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (address !== undefined) {
                localVarQueryParameter['address'] = address;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Now deprecated, use [v2/user/bulk](https://docs.neynar.com/reference/user-bulk), verifications are in the user object. Fetch all known verifications of a user.
         * @summary DEPRECATED - Fetch verifications for a given FID
         * @param {number} fid FID of the user
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        verifications: async (fid, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('verifications', 'fid', fid);
            const localVarPath = `/farcaster/verifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.VerificationApiAxiosParamCreator = VerificationApiAxiosParamCreator;
/**
 * VerificationApi - functional programming interface
 * @export
 */
const VerificationApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.VerificationApiAxiosParamCreator)(configuration);
    return {
        /**
         * Now deprecated. Use [v2/user/bulk-by-address](https://docs.neynar.com/reference/user-bulk-by-address). Checks if a given Ethereum address has a Farcaster user associated with it. Note: if an address is associated with multiple users, the API will return the user who most recently published a verification with the address (based on when Warpcast received the proof, not a self-reported timestamp).
         * @summary DEPRECATED - Fetch user for a given ethereum address
         * @param {string} address
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async userByVerification(address, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.userByVerification(address, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VerificationApi.userByVerification']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Now deprecated, use [v2/user/bulk](https://docs.neynar.com/reference/user-bulk), verifications are in the user object. Fetch all known verifications of a user.
         * @summary DEPRECATED - Fetch verifications for a given FID
         * @param {number} fid FID of the user
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        async verifications(fid, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifications(fid, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['VerificationApi.verifications']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.VerificationApiFp = VerificationApiFp;
/**
 * VerificationApi - factory interface
 * @export
 */
const VerificationApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.VerificationApiFp)(configuration);
    return {
        /**
         * Now deprecated. Use [v2/user/bulk-by-address](https://docs.neynar.com/reference/user-bulk-by-address). Checks if a given Ethereum address has a Farcaster user associated with it. Note: if an address is associated with multiple users, the API will return the user who most recently published a verification with the address (based on when Warpcast received the proof, not a self-reported timestamp).
         * @summary DEPRECATED - Fetch user for a given ethereum address
         * @param {string} address
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        userByVerification(address, options) {
            return localVarFp.userByVerification(address, options).then((request) => request(axios, basePath));
        },
        /**
         * Now deprecated, use [v2/user/bulk](https://docs.neynar.com/reference/user-bulk), verifications are in the user object. Fetch all known verifications of a user.
         * @summary DEPRECATED - Fetch verifications for a given FID
         * @param {number} fid FID of the user
         * @param {*} [options] Override http request option.
         * @deprecated
         * @throws {RequiredError}
         */
        verifications(fid, options) {
            return localVarFp.verifications(fid, options).then((request) => request(axios, basePath));
        },
    };
};
exports.VerificationApiFactory = VerificationApiFactory;
/**
 * VerificationApi - object-oriented interface
 * @export
 * @class VerificationApi
 * @extends {BaseAPI}
 */
class VerificationApi extends base_1.BaseAPI {
    /**
     * Now deprecated. Use [v2/user/bulk-by-address](https://docs.neynar.com/reference/user-bulk-by-address). Checks if a given Ethereum address has a Farcaster user associated with it. Note: if an address is associated with multiple users, the API will return the user who most recently published a verification with the address (based on when Warpcast received the proof, not a self-reported timestamp).
     * @summary DEPRECATED - Fetch user for a given ethereum address
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    userByVerification(address, options) {
        return (0, exports.VerificationApiFp)(this.configuration).userByVerification(address, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Now deprecated, use [v2/user/bulk](https://docs.neynar.com/reference/user-bulk), verifications are in the user object. Fetch all known verifications of a user.
     * @summary DEPRECATED - Fetch verifications for a given FID
     * @param {number} fid FID of the user
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    verifications(fid, options) {
        return (0, exports.VerificationApiFp)(this.configuration).verifications(fid, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.VerificationApi = VerificationApi;
