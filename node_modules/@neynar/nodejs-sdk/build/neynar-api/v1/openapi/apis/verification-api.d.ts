/**
 * Farcaster API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { UserResponse } from '../models';
import type { VerificationResponse } from '../models';
/**
 * VerificationApi - axios parameter creator
 * @export
 */
export declare const VerificationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Now deprecated. Use [v2/user/bulk-by-address](https://docs.neynar.com/reference/user-bulk-by-address). Checks if a given Ethereum address has a Farcaster user associated with it. Note: if an address is associated with multiple users, the API will return the user who most recently published a verification with the address (based on when Warpcast received the proof, not a self-reported timestamp).
     * @summary DEPRECATED - Fetch user for a given ethereum address
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    userByVerification: (address: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Now deprecated, use [v2/user/bulk](https://docs.neynar.com/reference/user-bulk), verifications are in the user object. Fetch all known verifications of a user.
     * @summary DEPRECATED - Fetch verifications for a given FID
     * @param {number} fid FID of the user
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    verifications: (fid: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * VerificationApi - functional programming interface
 * @export
 */
export declare const VerificationApiFp: (configuration?: Configuration) => {
    /**
     * Now deprecated. Use [v2/user/bulk-by-address](https://docs.neynar.com/reference/user-bulk-by-address). Checks if a given Ethereum address has a Farcaster user associated with it. Note: if an address is associated with multiple users, the API will return the user who most recently published a verification with the address (based on when Warpcast received the proof, not a self-reported timestamp).
     * @summary DEPRECATED - Fetch user for a given ethereum address
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    userByVerification(address: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>>;
    /**
     * Now deprecated, use [v2/user/bulk](https://docs.neynar.com/reference/user-bulk), verifications are in the user object. Fetch all known verifications of a user.
     * @summary DEPRECATED - Fetch verifications for a given FID
     * @param {number} fid FID of the user
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    verifications(fid: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VerificationResponse>>;
};
/**
 * VerificationApi - factory interface
 * @export
 */
export declare const VerificationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Now deprecated. Use [v2/user/bulk-by-address](https://docs.neynar.com/reference/user-bulk-by-address). Checks if a given Ethereum address has a Farcaster user associated with it. Note: if an address is associated with multiple users, the API will return the user who most recently published a verification with the address (based on when Warpcast received the proof, not a self-reported timestamp).
     * @summary DEPRECATED - Fetch user for a given ethereum address
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    userByVerification(address: string, options?: RawAxiosRequestConfig): AxiosPromise<UserResponse>;
    /**
     * Now deprecated, use [v2/user/bulk](https://docs.neynar.com/reference/user-bulk), verifications are in the user object. Fetch all known verifications of a user.
     * @summary DEPRECATED - Fetch verifications for a given FID
     * @param {number} fid FID of the user
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     */
    verifications(fid: number, options?: RawAxiosRequestConfig): AxiosPromise<VerificationResponse>;
};
/**
 * VerificationApi - object-oriented interface
 * @export
 * @class VerificationApi
 * @extends {BaseAPI}
 */
export declare class VerificationApi extends BaseAPI {
    /**
     * Now deprecated. Use [v2/user/bulk-by-address](https://docs.neynar.com/reference/user-bulk-by-address). Checks if a given Ethereum address has a Farcaster user associated with it. Note: if an address is associated with multiple users, the API will return the user who most recently published a verification with the address (based on when Warpcast received the proof, not a self-reported timestamp).
     * @summary DEPRECATED - Fetch user for a given ethereum address
     * @param {string} address
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    userByVerification(address: string, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserResponse, any>>;
    /**
     * Now deprecated, use [v2/user/bulk](https://docs.neynar.com/reference/user-bulk), verifications are in the user object. Fetch all known verifications of a user.
     * @summary DEPRECATED - Fetch verifications for a given FID
     * @param {number} fid FID of the user
     * @param {*} [options] Override http request option.
     * @deprecated
     * @throws {RequiredError}
     * @memberof VerificationApi
     */
    verifications(fid: number, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<VerificationResponse, any>>;
}
