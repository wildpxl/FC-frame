"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertToV2CastList = exports.convertToV2Cast = exports.convertToV2UserList = exports.convertToV2User = void 0;
const convertToV2User = (v1User) => {
    var _a, _b;
    // @ts-ignore
    const v2User = {
        object: "user",
        fid: v1User.fid,
        custody_address: v1User.custodyAddress,
        username: v1User.username,
        display_name: v1User.displayName,
        pfp_url: v1User.pfp.url,
        profile: {
            bio: {
                text: v1User.profile.bio.text,
                mentioned_profiles: (_b = (_a = v1User.profile.bio) === null || _a === void 0 ? void 0 : _a.mentionedProfiles) !== null && _b !== void 0 ? _b : [],
            },
        },
        follower_count: v1User === null || v1User === void 0 ? void 0 : v1User.followerCount,
        following_count: v1User === null || v1User === void 0 ? void 0 : v1User.followingCount,
        verifications: v1User === null || v1User === void 0 ? void 0 : v1User.verifications,
        verified_addresses: {
            eth_addresses: [],
            sol_addresses: [],
        },
    };
    return v2User;
};
exports.convertToV2User = convertToV2User;
const convertToV2UserList = (v1Users) => {
    const v2Users = [];
    for (let i = 0; i < v1Users.length; i++) {
        const v2User = (0, exports.convertToV2User)(v1Users[i]);
        v2Users.push(v2User);
    }
    return v2Users;
};
exports.convertToV2UserList = convertToV2UserList;
const convertToV2Cast = (v1Cast) => {
    var _a, _b;
    const v2Cast = Object.assign(Object.assign(Object.assign({ object: "cast_hydrated", hash: v1Cast.hash, thread_hash: v1Cast.threadHash, parent_hash: v1Cast.parentHash, parent_url: v1Cast.parentUrl ? v1Cast.parentUrl : null, parent_author: {
            fid: v1Cast.parentAuthor.fid,
        }, author: (0, exports.convertToV2User)(v1Cast.author), text: v1Cast.text, timestamp: v1Cast.timestamp, embeds: v1Cast.embeds.map((embed) => {
            // Currently transformEmbeds is not being used. Leaving it here for now in case we need it later.
            // if (embed.castId) {
            //   return { cast_id: embed.castId }; // changed 'castId' to 'cast_id'
            // } else {
            //   return embed; // If there is no 'castId', return the embed object as is
            // }
            return embed;
        }) }, (v1Cast.reactions
        ? {
            reactions: {
                likes: (_a = v1Cast.reactions) === null || _a === void 0 ? void 0 : _a.fids.map((fid, idx) => {
                    var _a;
                    return {
                        fid: fid,
                        fname: (_a = v1Cast.reactions) === null || _a === void 0 ? void 0 : _a.fnames[idx],
                    };
                }),
                // assuming v1Cast.recasts is an array of fids and v1Cast.recasters is an array of fames
                recasts: (_b = v1Cast.recasts) === null || _b === void 0 ? void 0 : _b.fids.map((fid, idx) => {
                    return {
                        fid: fid,
                        fname: v1Cast.recasters[idx],
                    };
                }),
            },
        }
        : {})), (v1Cast.replies
        ? {
            replies: {
                count: v1Cast.replies.count,
            },
        }
        : {})), { mentioned_profiles: (0, exports.convertToV2UserList)(v1Cast.mentionedProfiles) });
    // @ts-ignore
    return v2Cast;
};
exports.convertToV2Cast = convertToV2Cast;
const convertToV2CastList = (v1Casts) => {
    const v2Casts = [];
    for (let i = 0; i < v1Casts.length; i++) {
        const v1Cast = v1Casts[i];
        const v2Cast = (0, exports.convertToV2Cast)(v1Cast);
        v2Casts.push(v2Cast);
    }
    return v2Casts;
};
exports.convertToV2CastList = convertToV2CastList;
