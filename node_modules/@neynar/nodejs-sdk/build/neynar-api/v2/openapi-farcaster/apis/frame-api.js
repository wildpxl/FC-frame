"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FetchValidateFrameAnalyticsAggregateWindowEnum = exports.FrameApi = exports.FrameApiFactory = exports.FrameApiFp = exports.FrameApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * FrameApi - axios parameter creator
 * @export
 */
const FrameApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Delete an existing frame, if it was made by the developer (identified by API key)
         * @summary Delete frame
         * @param {DeleteFrameReqBody} delete_frame_req_body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<DeleteFrameResponse>} A promise that resolves to a `DeleteFrameResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-neynar-frame)
         *
         */
        deleteNeynarFrame: async (delete_frame_req_body, options = {}) => {
            // verify required parameter 'delete_frame_req_body' is not null or undefined
            (0, common_1.assertParamExists)('deleteNeynarFrame', 'delete_frame_req_body', delete_frame_req_body);
            const localVarPath = `/farcaster/frame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(delete_frame_req_body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the frame meta tags from the URL
         * @summary Meta tags from URL
         * @param {string} url The frame URL to crawl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchFrameMetaTagsFromUrl200Response>} A promise that resolves to a `FetchFrameMetaTagsFromUrl200Response` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-meta-tags-from-url)
         *
         */
        fetchFrameMetaTagsFromUrl: async (url, options = {}) => {
            // verify required parameter 'url' is not null or undefined
            (0, common_1.assertParamExists)('fetchFrameMetaTagsFromUrl', 'url', url);
            const localVarPath = `/farcaster/frame/crawl`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a list of frames made by the developer (identified by API key)
         * @summary List of frames
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Array<NeynarFrame>>} A promise that resolves to a `Array<NeynarFrame>` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-neynar-frames)
         *
         */
        fetchNeynarFrames: async (options = {}) => {
            const localVarPath = `/farcaster/frame/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.
         * @summary Analytics for the frame
         * @param {string} frame_url
         * @param {ValidateFrameAnalyticsType} analytics_type
         * @param {string} start
         * @param {string} stop
         * @param {FetchValidateFrameAnalyticsAggregateWindowEnum} [aggregate_window] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FrameValidateAnalyticsResponse>} A promise that resolves to a `FrameValidateAnalyticsResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-analytics)
         *
         */
        fetchValidateFrameAnalytics: async (frame_url, analytics_type, start, stop, aggregate_window, options = {}) => {
            // verify required parameter 'frame_url' is not null or undefined
            (0, common_1.assertParamExists)('fetchValidateFrameAnalytics', 'frame_url', frame_url);
            // verify required parameter 'analytics_type' is not null or undefined
            (0, common_1.assertParamExists)('fetchValidateFrameAnalytics', 'analytics_type', analytics_type);
            // verify required parameter 'start' is not null or undefined
            (0, common_1.assertParamExists)('fetchValidateFrameAnalytics', 'start', start);
            // verify required parameter 'stop' is not null or undefined
            (0, common_1.assertParamExists)('fetchValidateFrameAnalytics', 'stop', stop);
            const localVarPath = `/farcaster/frame/validate/analytics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (frame_url !== undefined) {
                localVarQueryParameter['frame_url'] = frame_url;
            }
            if (analytics_type !== undefined) {
                localVarQueryParameter['analytics_type'] = analytics_type;
            }
            if (start !== undefined) {
                localVarQueryParameter['start'] = (start instanceof Date) ?
                    start.toISOString() :
                    start;
            }
            if (stop !== undefined) {
                localVarQueryParameter['stop'] = (stop instanceof Date) ?
                    stop.toISOString() :
                    stop;
            }
            if (aggregate_window !== undefined) {
                localVarQueryParameter['aggregate_window'] = aggregate_window;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a list of all the frames validated by a user
         * @summary All frames validated by user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FrameValidateListResponse>} A promise that resolves to a `FrameValidateListResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-list)
         *
         */
        fetchValidateFrameList: async (options = {}) => {
            const localVarPath = `/farcaster/frame/validate/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a frame either by UUID or Neynar URL
         * @summary Frame by UUID or URL
         * @param {FrameType} type
         * @param {string} [uuid] UUID of the frame to fetch
         * @param {string} [url] URL of the Neynar frame to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-neynar-frame)
         *
         */
        lookupNeynarFrame: async (type, uuid, url, options = {}) => {
            // verify required parameter 'type' is not null or undefined
            (0, common_1.assertParamExists)('lookupNeynarFrame', 'type', type);
            const localVarPath = `/farcaster/frame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (uuid !== undefined) {
                localVarQueryParameter['uuid'] = uuid;
            }
            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post frame actions, cast actions or cast composer actions to the server  \\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for frames.
         * @summary Post a frame action, cast action or a cast composer action
         * @param {FrameActionReqBody} frame_action_req_body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action)
         *
         */
        postFrameAction: async (frame_action_req_body, options = {}) => {
            // verify required parameter 'frame_action_req_body' is not null or undefined
            (0, common_1.assertParamExists)('postFrameAction', 'frame_action_req_body', frame_action_req_body);
            const localVarPath = `/farcaster/frame/action`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(frame_action_req_body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Post a frame action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds.
         * @summary Signature packet
         * @param {FrameDeveloperManagedActionReqBody} frame_developer_managed_action_req_body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action-developer-managed)
         *
         */
        postFrameActionDeveloperManaged: async (frame_developer_managed_action_req_body, options = {}) => {
            // verify required parameter 'frame_developer_managed_action_req_body' is not null or undefined
            (0, common_1.assertParamExists)('postFrameActionDeveloperManaged', 'frame_developer_managed_action_req_body', frame_developer_managed_action_req_body);
            const localVarPath = `/farcaster/frame/developer_managed/action`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(frame_developer_managed_action_req_body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new frame with a list of pages.
         * @summary Create frame
         * @param {NeynarFrameCreationReqBody} neynar_frame_creation_req_body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-neynar-frame)
         *
         */
        publishNeynarFrame: async (neynar_frame_creation_req_body, options = {}) => {
            // verify required parameter 'neynar_frame_creation_req_body' is not null or undefined
            (0, common_1.assertParamExists)('publishNeynarFrame', 'neynar_frame_creation_req_body', neynar_frame_creation_req_body);
            const localVarPath = `/farcaster/frame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(neynar_frame_creation_req_body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
         * @summary Update frame
         * @param {NeynarFrameUpdateReqBody} neynar_frame_update_req_body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-neynar-frame)
         *
         */
        updateNeynarFrame: async (neynar_frame_update_req_body, options = {}) => {
            // verify required parameter 'neynar_frame_update_req_body' is not null or undefined
            (0, common_1.assertParamExists)('updateNeynarFrame', 'neynar_frame_update_req_body', neynar_frame_update_req_body);
            const localVarPath = `/farcaster/frame`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(neynar_frame_update_req_body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex)
         * @summary Validate frame action
         * @param {ValidateFrameActionReqBody} validate_frame_action_req_body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<ValidateFrameActionResponse>} A promise that resolves to a `ValidateFrameActionResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-frame-action)
         *
         */
        validateFrameAction: async (validate_frame_action_req_body, options = {}) => {
            // verify required parameter 'validate_frame_action_req_body' is not null or undefined
            (0, common_1.assertParamExists)('validateFrameAction', 'validate_frame_action_req_body', validate_frame_action_req_body);
            const localVarPath = `/farcaster/frame/validate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(validate_frame_action_req_body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.FrameApiAxiosParamCreator = FrameApiAxiosParamCreator;
/**
 * FrameApi - functional programming interface
 * @export
 */
const FrameApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.FrameApiAxiosParamCreator)(configuration);
    return {
        /**
         * Delete an existing frame, if it was made by the developer (identified by API key)
         * @summary Delete frame
         * @param {DeleteFrameReqBody} delete_frame_req_body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<DeleteFrameResponse>} A promise that resolves to a `DeleteFrameResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-neynar-frame)
         *
         */
        async deleteNeynarFrame(delete_frame_req_body, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNeynarFrame(delete_frame_req_body, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FrameApi.deleteNeynarFrame']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches the frame meta tags from the URL
         * @summary Meta tags from URL
         * @param {string} url The frame URL to crawl
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchFrameMetaTagsFromUrl200Response>} A promise that resolves to a `FetchFrameMetaTagsFromUrl200Response` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-meta-tags-from-url)
         *
         */
        async fetchFrameMetaTagsFromUrl(url, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFrameMetaTagsFromUrl(url, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FrameApi.fetchFrameMetaTagsFromUrl']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch a list of frames made by the developer (identified by API key)
         * @summary List of frames
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Array<NeynarFrame>>} A promise that resolves to a `Array<NeynarFrame>` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-neynar-frames)
         *
         */
        async fetchNeynarFrames(options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchNeynarFrames(options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FrameApi.fetchNeynarFrames']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.
         * @summary Analytics for the frame
         * @param {string} frame_url
         * @param {ValidateFrameAnalyticsType} analytics_type
         * @param {string} start
         * @param {string} stop
         * @param {FetchValidateFrameAnalyticsAggregateWindowEnum} [aggregate_window] Required for &#x60;analytics_type&#x3D;interactions-per-cast&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FrameValidateAnalyticsResponse>} A promise that resolves to a `FrameValidateAnalyticsResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-analytics)
         *
         */
        async fetchValidateFrameAnalytics(frame_url, analytics_type, start, stop, aggregate_window, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchValidateFrameAnalytics(frame_url, analytics_type, start, stop, aggregate_window, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FrameApi.fetchValidateFrameAnalytics']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch a list of all the frames validated by a user
         * @summary All frames validated by user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FrameValidateListResponse>} A promise that resolves to a `FrameValidateListResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-list)
         *
         */
        async fetchValidateFrameList(options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchValidateFrameList(options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FrameApi.fetchValidateFrameList']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch a frame either by UUID or Neynar URL
         * @summary Frame by UUID or URL
         * @param {FrameType} type
         * @param {string} [uuid] UUID of the frame to fetch
         * @param {string} [url] URL of the Neynar frame to fetch
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-neynar-frame)
         *
         */
        async lookupNeynarFrame(type, uuid, url, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupNeynarFrame(type, uuid, url, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FrameApi.lookupNeynarFrame']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Post frame actions, cast actions or cast composer actions to the server  \\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for frames.
         * @summary Post a frame action, cast action or a cast composer action
         * @param {FrameActionReqBody} frame_action_req_body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action)
         *
         */
        async postFrameAction(frame_action_req_body, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFrameAction(frame_action_req_body, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FrameApi.postFrameAction']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Post a frame action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds.
         * @summary Signature packet
         * @param {FrameDeveloperManagedActionReqBody} frame_developer_managed_action_req_body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action-developer-managed)
         *
         */
        async postFrameActionDeveloperManaged(frame_developer_managed_action_req_body, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.postFrameActionDeveloperManaged(frame_developer_managed_action_req_body, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FrameApi.postFrameActionDeveloperManaged']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new frame with a list of pages.
         * @summary Create frame
         * @param {NeynarFrameCreationReqBody} neynar_frame_creation_req_body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-neynar-frame)
         *
         */
        async publishNeynarFrame(neynar_frame_creation_req_body, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishNeynarFrame(neynar_frame_creation_req_body, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FrameApi.publishNeynarFrame']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
         * @summary Update frame
         * @param {NeynarFrameUpdateReqBody} neynar_frame_update_req_body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-neynar-frame)
         *
         */
        async updateNeynarFrame(neynar_frame_update_req_body, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNeynarFrame(neynar_frame_update_req_body, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FrameApi.updateNeynarFrame']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex)
         * @summary Validate frame action
         * @param {ValidateFrameActionReqBody} validate_frame_action_req_body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<ValidateFrameActionResponse>} A promise that resolves to a `ValidateFrameActionResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-frame-action)
         *
         */
        async validateFrameAction(validate_frame_action_req_body, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateFrameAction(validate_frame_action_req_body, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FrameApi.validateFrameAction']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.FrameApiFp = FrameApiFp;
/**
 * FrameApi - factory interface
 * @export
 */
const FrameApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.FrameApiFp)(configuration);
    return {
        /**
         * Delete an existing frame, if it was made by the developer (identified by API key)
         * @summary Delete frame
         * @param {FrameApiDeleteNeynarFrameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<DeleteFrameResponse>} A promise that resolves to a `DeleteFrameResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-neynar-frame)
         *
         */
        deleteNeynarFrame(requestParameters, options) {
            return localVarFp.deleteNeynarFrame(requestParameters.delete_frame_req_body, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the frame meta tags from the URL
         * @summary Meta tags from URL
         * @param {FrameApiFetchFrameMetaTagsFromUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FetchFrameMetaTagsFromUrl200Response>} A promise that resolves to a `FetchFrameMetaTagsFromUrl200Response` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-meta-tags-from-url)
         *
         */
        fetchFrameMetaTagsFromUrl(requestParameters, options) {
            return localVarFp.fetchFrameMetaTagsFromUrl(requestParameters.url, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a list of frames made by the developer (identified by API key)
         * @summary List of frames
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Array<NeynarFrame>>} A promise that resolves to a `Array<NeynarFrame>` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-neynar-frames)
         *
         */
        fetchNeynarFrames(options) {
            return localVarFp.fetchNeynarFrames(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.
         * @summary Analytics for the frame
         * @param {FrameApiFetchValidateFrameAnalyticsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FrameValidateAnalyticsResponse>} A promise that resolves to a `FrameValidateAnalyticsResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-analytics)
         *
         */
        fetchValidateFrameAnalytics(requestParameters, options) {
            return localVarFp.fetchValidateFrameAnalytics(requestParameters.frame_url, requestParameters.analytics_type, requestParameters.start, requestParameters.stop, requestParameters.aggregate_window, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a list of all the frames validated by a user
         * @summary All frames validated by user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FrameValidateListResponse>} A promise that resolves to a `FrameValidateListResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-list)
         *
         */
        fetchValidateFrameList(options) {
            return localVarFp.fetchValidateFrameList(options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a frame either by UUID or Neynar URL
         * @summary Frame by UUID or URL
         * @param {FrameApiLookupNeynarFrameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-neynar-frame)
         *
         */
        lookupNeynarFrame(requestParameters, options) {
            return localVarFp.lookupNeynarFrame(requestParameters.type, requestParameters.uuid, requestParameters.url, options).then((request) => request(axios, basePath));
        },
        /**
         * Post frame actions, cast actions or cast composer actions to the server  \\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for frames.
         * @summary Post a frame action, cast action or a cast composer action
         * @param {FrameApiPostFrameActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action)
         *
         */
        postFrameAction(requestParameters, options) {
            return localVarFp.postFrameAction(requestParameters.frame_action_req_body, options).then((request) => request(axios, basePath));
        },
        /**
         * Post a frame action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds.
         * @summary Signature packet
         * @param {FrameApiPostFrameActionDeveloperManagedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action-developer-managed)
         *
         */
        postFrameActionDeveloperManaged(requestParameters, options) {
            return localVarFp.postFrameActionDeveloperManaged(requestParameters.frame_developer_managed_action_req_body, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new frame with a list of pages.
         * @summary Create frame
         * @param {FrameApiPublishNeynarFrameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-neynar-frame)
         *
         */
        publishNeynarFrame(requestParameters, options) {
            return localVarFp.publishNeynarFrame(requestParameters.neynar_frame_creation_req_body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
         * @summary Update frame
         * @param {FrameApiUpdateNeynarFrameRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-neynar-frame)
         *
         */
        updateNeynarFrame(requestParameters, options) {
            return localVarFp.updateNeynarFrame(requestParameters.neynar_frame_update_req_body, options).then((request) => request(axios, basePath));
        },
        /**
         * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex)
         * @summary Validate frame action
         * @param {FrameApiValidateFrameActionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<ValidateFrameActionResponse>} A promise that resolves to a `ValidateFrameActionResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-frame-action)
         *
         */
        validateFrameAction(requestParameters, options) {
            return localVarFp.validateFrameAction(requestParameters.validate_frame_action_req_body, options).then((request) => request(axios, basePath));
        },
    };
};
exports.FrameApiFactory = FrameApiFactory;
/**
 * FrameApi - object-oriented interface
 * @export
 * @class FrameApi
 * @extends {BaseAPI}
 */
class FrameApi extends base_1.BaseAPI {
    /**
     * Delete an existing frame, if it was made by the developer (identified by API key)
     * @summary Delete frame
     * @param {FrameApiDeleteNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<DeleteFrameResponse>} A promise that resolves to a `DeleteFrameResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-neynar-frame)
     *
     */
    deleteNeynarFrame(requestParameters, options) {
        return (0, exports.FrameApiFp)(this.configuration).deleteNeynarFrame(requestParameters.delete_frame_req_body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches the frame meta tags from the URL
     * @summary Meta tags from URL
     * @param {FrameApiFetchFrameMetaTagsFromUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<FetchFrameMetaTagsFromUrl200Response>} A promise that resolves to a `FetchFrameMetaTagsFromUrl200Response` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frame-meta-tags-from-url)
     *
     */
    fetchFrameMetaTagsFromUrl(requestParameters, options) {
        return (0, exports.FrameApiFp)(this.configuration).fetchFrameMetaTagsFromUrl(requestParameters.url, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a list of frames made by the developer (identified by API key)
     * @summary List of frames
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<Array<NeynarFrame>>} A promise that resolves to a `Array<NeynarFrame>` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-neynar-frames)
     *
     */
    fetchNeynarFrames(options) {
        return (0, exports.FrameApiFp)(this.configuration).fetchNeynarFrames(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch analytics for total-interactors, interactors, nteractions-per-cast and input-text.
     * @summary Analytics for the frame
     * @param {FrameApiFetchValidateFrameAnalyticsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<FrameValidateAnalyticsResponse>} A promise that resolves to a `FrameValidateAnalyticsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-analytics)
     *
     */
    fetchValidateFrameAnalytics(requestParameters, options) {
        return (0, exports.FrameApiFp)(this.configuration).fetchValidateFrameAnalytics(requestParameters.frame_url, requestParameters.analytics_type, requestParameters.start, requestParameters.stop, requestParameters.aggregate_window, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a list of all the frames validated by a user
     * @summary All frames validated by user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<FrameValidateListResponse>} A promise that resolves to a `FrameValidateListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-validate-frame-list)
     *
     */
    fetchValidateFrameList(options) {
        return (0, exports.FrameApiFp)(this.configuration).fetchValidateFrameList(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a frame either by UUID or Neynar URL
     * @summary Frame by UUID or URL
     * @param {FrameApiLookupNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-neynar-frame)
     *
     */
    lookupNeynarFrame(requestParameters, options) {
        return (0, exports.FrameApiFp)(this.configuration).lookupNeynarFrame(requestParameters.type, requestParameters.uuid, requestParameters.url, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Post frame actions, cast actions or cast composer actions to the server  \\ (In order to post any of these actions, you need to have an approved `signer_uuid`)  The POST request to the post_url has a timeout of 5 seconds for frames.
     * @summary Post a frame action, cast action or a cast composer action
     * @param {FrameApiPostFrameActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action)
     *
     */
    postFrameAction(requestParameters, options) {
        return (0, exports.FrameApiFp)(this.configuration).postFrameAction(requestParameters.frame_action_req_body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Post a frame action that has been signed with a developer managed signer  The POST request to the post_url has a timeout of 5 seconds.
     * @summary Signature packet
     * @param {FrameApiPostFrameActionDeveloperManagedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<Frame>} A promise that resolves to a `Frame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/post-frame-action-developer-managed)
     *
     */
    postFrameActionDeveloperManaged(requestParameters, options) {
        return (0, exports.FrameApiFp)(this.configuration).postFrameActionDeveloperManaged(requestParameters.frame_developer_managed_action_req_body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a new frame with a list of pages.
     * @summary Create frame
     * @param {FrameApiPublishNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-neynar-frame)
     *
     */
    publishNeynarFrame(requestParameters, options) {
        return (0, exports.FrameApiFp)(this.configuration).publishNeynarFrame(requestParameters.neynar_frame_creation_req_body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update an existing frame with a list of pages, if it was made by the developer (identified by API key)
     * @summary Update frame
     * @param {FrameApiUpdateNeynarFrameRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<NeynarFrame>} A promise that resolves to a `NeynarFrame` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/update-neynar-frame)
     *
     */
    updateNeynarFrame(requestParameters, options) {
        return (0, exports.FrameApiFp)(this.configuration).updateNeynarFrame(requestParameters.neynar_frame_update_req_body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Validates a frame against by an interacting user against a Farcaster Hub \\ (In order to validate a frame, message bytes from Frame Action must be provided in hex)
     * @summary Validate frame action
     * @param {FrameApiValidateFrameActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FrameApi
     * @returns {Promise<ValidateFrameActionResponse>} A promise that resolves to a `ValidateFrameActionResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/validate-frame-action)
     *
     */
    validateFrameAction(requestParameters, options) {
        return (0, exports.FrameApiFp)(this.configuration).validateFrameAction(requestParameters.validate_frame_action_req_body, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FrameApi = FrameApi;
/**
 * @export
 */
exports.FetchValidateFrameAnalyticsAggregateWindowEnum = {
    _10s: '10s',
    _1m: '1m',
    _2m: '2m',
    _5m: '5m',
    _10m: '10m',
    _20m: '20m',
    _30m: '30m',
    _2h: '2h',
    _12h: '12h',
    _1d: '1d',
    _7d: '7d'
};
