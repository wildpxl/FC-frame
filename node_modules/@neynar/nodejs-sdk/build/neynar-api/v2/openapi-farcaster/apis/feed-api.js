"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FetchTrendingFeedTimeWindowEnum = exports.FetchRepliesAndRecastsForUserFilterEnum = exports.FeedApi = exports.FeedApiFactory = exports.FeedApiFp = exports.FeedApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * FeedApi - axios parameter creator
 * @export
 */
const FeedApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel
         * @summary Chronologically
         * @param {number} fid FID of user whose recent casts you want to fetch
         * @param {number} [viewer_fid] FID of the user viewing the feed
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 150)
         * @param {string} [cursor] Pagination cursor
         * @param {boolean} [include_replies] Include reply casts by the author in the response, true by default
         * @param {string} [parent_url] Parent URL to filter the feed; mutually exclusive with channel_id
         * @param {string} [channel_id] Channel ID to filter the feed; mutually exclusive with parent_url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)
         *
         */
        fetchCastsForUser: async (fid, viewer_fid, limit, cursor, include_replies, parent_url, channel_id, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('fetchCastsForUser', 'fid', fid);
            const localVarPath = `/farcaster/feed/user/casts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (viewer_fid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewer_fid;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (include_replies !== undefined) {
                localVarQueryParameter['include_replies'] = include_replies;
            }
            if (parent_url !== undefined) {
                localVarQueryParameter['parent_url'] = parent_url;
            }
            if (channel_id !== undefined) {
                localVarQueryParameter['channel_id'] = channel_id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.
         * @summary By filters
         * @param {FeedType} feed_type Defaults to following (requires FID or address). If set to filter (requires filter_type)
         * @param {FilterType} [filter_type] Used when feed_type&#x3D;filter. Can be set to FIDs (requires FIDs) or parent_url (requires parent_url) or channel_id (requires channel_id)
         * @param {number} [fid] (Optional) FID of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type
         * @param {string} [fids] Used when filter_type&#x3D;FIDs . Create a feed based on a list of FIDs. Max array size is 250. Requires feed_type and filter_type.
         * @param {string} [parent_url] Used when filter_type&#x3D;parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type
         * @param {string} [channel_id] Used when filter_type&#x3D;channel_id can be used to fetch casts under a channel. Requires feed_type and filter_type.
         * @param {boolean} [members_only] Used when filter_type&#x3D;channel_id. Only include casts from members of the channel. True by default.
         * @param {string} [embed_url] Used when filter_type&#x3D;embed_url can be used to fetch all casts with an embed url that contains embed_url. Requires feed_type and filter_type
         * @param {Array<EmbedType>} [embed_types] Used when filter_type&#x3D;embed_types can be used to fetch all casts with matching content types. Requires feed_type and filter_type
         * @param {boolean} [with_recasts] Include recasts in the response, true by default
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)
         *
         */
        fetchFeed: async (feed_type, filter_type, fid, fids, parent_url, channel_id, members_only, embed_url, embed_types, with_recasts, limit, cursor, viewer_fid, options = {}) => {
            // verify required parameter 'feed_type' is not null or undefined
            (0, common_1.assertParamExists)('fetchFeed', 'feed_type', feed_type);
            const localVarPath = `/farcaster/feed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (feed_type !== undefined) {
                localVarQueryParameter['feed_type'] = feed_type;
            }
            if (filter_type !== undefined) {
                localVarQueryParameter['filter_type'] = filter_type;
            }
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (fids !== undefined) {
                localVarQueryParameter['fids'] = fids;
            }
            if (parent_url !== undefined) {
                localVarQueryParameter['parent_url'] = parent_url;
            }
            if (channel_id !== undefined) {
                localVarQueryParameter['channel_id'] = channel_id;
            }
            if (members_only !== undefined) {
                localVarQueryParameter['members_only'] = members_only;
            }
            if (embed_url !== undefined) {
                localVarQueryParameter['embed_url'] = embed_url;
            }
            if (embed_types) {
                localVarQueryParameter['embed_types'] = embed_types.join(base_1.COLLECTION_FORMATS.csv);
            }
            if (with_recasts !== undefined) {
                localVarQueryParameter['with_recasts'] = with_recasts;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (viewer_fid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewer_fid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch feed based on channel IDs
         * @summary By channel IDs
         * @param {string} channel_ids Comma separated list of channel IDs e.g. neynar,farcaster
         * @param {boolean} [with_recasts] Include recasts in the response, true by default
         * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
         * @param {boolean} [with_replies] Include replies in the response, false by default
         * @param {boolean} [members_only] Only include casts from members of the channel. True by default.
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {boolean} [should_moderate] If true, only casts that have been liked by the moderator (if one exists) will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)
         *
         */
        fetchFeedByChannelIds: async (channel_ids, with_recasts, viewer_fid, with_replies, members_only, limit, cursor, should_moderate, options = {}) => {
            // verify required parameter 'channel_ids' is not null or undefined
            (0, common_1.assertParamExists)('fetchFeedByChannelIds', 'channel_ids', channel_ids);
            const localVarPath = `/farcaster/feed/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (channel_ids !== undefined) {
                localVarQueryParameter['channel_ids'] = channel_ids;
            }
            if (with_recasts !== undefined) {
                localVarQueryParameter['with_recasts'] = with_recasts;
            }
            if (viewer_fid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewer_fid;
            }
            if (with_replies !== undefined) {
                localVarQueryParameter['with_replies'] = with_replies;
            }
            if (members_only !== undefined) {
                localVarQueryParameter['members_only'] = members_only;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (should_moderate !== undefined) {
                localVarQueryParameter['should_moderate'] = should_moderate;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch feed based on parent URLs
         * @summary By parent URLs
         * @param {string} parent_urls Comma separated list of parent_urls
         * @param {boolean} [with_recasts] Include recasts in the response, true by default
         * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
         * @param {boolean} [with_replies] Include replies in the response, false by default
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)
         *
         */
        fetchFeedByParentUrls: async (parent_urls, with_recasts, viewer_fid, with_replies, limit, cursor, options = {}) => {
            // verify required parameter 'parent_urls' is not null or undefined
            (0, common_1.assertParamExists)('fetchFeedByParentUrls', 'parent_urls', parent_urls);
            const localVarPath = `/farcaster/feed/parent_urls`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (parent_urls !== undefined) {
                localVarQueryParameter['parent_urls'] = parent_urls;
            }
            if (with_recasts !== undefined) {
                localVarQueryParameter['with_recasts'] = with_recasts;
            }
            if (viewer_fid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewer_fid;
            }
            if (with_replies !== undefined) {
                localVarQueryParameter['with_replies'] = with_replies;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a personalized For You feed for a user
         * @summary For you
         * @param {number} fid FID of user whose feed you want to create
         * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
         * @param {ForYouProvider} [provider]
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 50)
         * @param {string} [cursor] Pagination cursor.
         * @param {string} [provider_metadata] provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)
         *
         */
        fetchFeedForYou: async (fid, viewer_fid, provider, limit, cursor, provider_metadata, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('fetchFeedForYou', 'fid', fid);
            const localVarPath = `/farcaster/feed/for_you`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (viewer_fid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewer_fid;
            }
            if (provider !== undefined) {
                localVarQueryParameter['provider'] = provider;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (provider_metadata !== undefined) {
                localVarQueryParameter['provider_metadata'] = provider_metadata;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch feed of casts with Frames, reverse chronological order
         * @summary Casts with Frames
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)
         *
         */
        fetchFramesOnlyFeed: async (limit, viewer_fid, cursor, options = {}) => {
            const localVarPath = `/farcaster/feed/frames`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (viewer_fid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewer_fid;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
         * @summary 10 most popular casts
         * @param {number} fid FID of user whose feed you want to create
         * @param {number} [viewer_fid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)
         *
         */
        fetchPopularCastsByUser: async (fid, viewer_fid, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('fetchPopularCastsByUser', 'fid', fid);
            const localVarPath = `/farcaster/feed/user/popular`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (viewer_fid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewer_fid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch recent replies and recasts for a given user FID; sorted by most recent first
         * @summary Replies and recasts
         * @param {number} fid FID of user whose replies and recasts you want to fetch
         * @param {FetchRepliesAndRecastsForUserFilterEnum} [filter] filter to fetch only replies or recasts
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 50)
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)
         *
         */
        fetchRepliesAndRecastsForUser: async (fid, filter, limit, cursor, viewer_fid, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('fetchRepliesAndRecastsForUser', 'fid', fid);
            const localVarPath = `/farcaster/feed/user/replies_and_recasts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (viewer_fid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewer_fid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.
         * @summary Trending casts
         * @param {number} [limit] Number of results to fetch  (Default: 10, Maximum: 10)
         * @param {string} [cursor] Pagination cursor
         * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
         * @param {FetchTrendingFeedTimeWindowEnum} [time_window] Time window for trending casts (7d window for channel feeds only)
         * @param {string} [channel_id] Channel ID to filter trending casts. Less active channels might have no casts in the time window selected.
         * @param {FeedTrendingProvider} [provider] The provider of the trending casts feed.
         * @param {string} [provider_metadata] provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)
         *
         */
        fetchTrendingFeed: async (limit, cursor, viewer_fid, time_window, channel_id, provider, provider_metadata, options = {}) => {
            const localVarPath = `/farcaster/feed/trending`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            if (viewer_fid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewer_fid;
            }
            if (time_window !== undefined) {
                localVarQueryParameter['time_window'] = time_window;
            }
            if (channel_id !== undefined) {
                localVarQueryParameter['channel_id'] = channel_id;
            }
            if (provider !== undefined) {
                localVarQueryParameter['provider'] = provider;
            }
            if (provider_metadata !== undefined) {
                localVarQueryParameter['provider_metadata'] = provider_metadata;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch feed based on who a user is following
         * @summary Following
         * @param {number} fid FID of user whose feed you want to create
         * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
         * @param {boolean} [with_recasts] Include recasts in the response, true by default
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)
         *
         */
        fetchUserFollowingFeed: async (fid, viewer_fid, with_recasts, limit, cursor, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('fetchUserFollowingFeed', 'fid', fid);
            const localVarPath = `/farcaster/feed/following`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (viewer_fid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewer_fid;
            }
            if (with_recasts !== undefined) {
                localVarQueryParameter['with_recasts'] = with_recasts;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.FeedApiAxiosParamCreator = FeedApiAxiosParamCreator;
/**
 * FeedApi - functional programming interface
 * @export
 */
const FeedApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.FeedApiAxiosParamCreator)(configuration);
    return {
        /**
         * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel
         * @summary Chronologically
         * @param {number} fid FID of user whose recent casts you want to fetch
         * @param {number} [viewer_fid] FID of the user viewing the feed
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 150)
         * @param {string} [cursor] Pagination cursor
         * @param {boolean} [include_replies] Include reply casts by the author in the response, true by default
         * @param {string} [parent_url] Parent URL to filter the feed; mutually exclusive with channel_id
         * @param {string} [channel_id] Channel ID to filter the feed; mutually exclusive with parent_url
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)
         *
         */
        async fetchCastsForUser(fid, viewer_fid, limit, cursor, include_replies, parent_url, channel_id, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchCastsForUser(fid, viewer_fid, limit, cursor, include_replies, parent_url, channel_id, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FeedApi.fetchCastsForUser']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.
         * @summary By filters
         * @param {FeedType} feed_type Defaults to following (requires FID or address). If set to filter (requires filter_type)
         * @param {FilterType} [filter_type] Used when feed_type&#x3D;filter. Can be set to FIDs (requires FIDs) or parent_url (requires parent_url) or channel_id (requires channel_id)
         * @param {number} [fid] (Optional) FID of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type
         * @param {string} [fids] Used when filter_type&#x3D;FIDs . Create a feed based on a list of FIDs. Max array size is 250. Requires feed_type and filter_type.
         * @param {string} [parent_url] Used when filter_type&#x3D;parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type
         * @param {string} [channel_id] Used when filter_type&#x3D;channel_id can be used to fetch casts under a channel. Requires feed_type and filter_type.
         * @param {boolean} [members_only] Used when filter_type&#x3D;channel_id. Only include casts from members of the channel. True by default.
         * @param {string} [embed_url] Used when filter_type&#x3D;embed_url can be used to fetch all casts with an embed url that contains embed_url. Requires feed_type and filter_type
         * @param {Array<EmbedType>} [embed_types] Used when filter_type&#x3D;embed_types can be used to fetch all casts with matching content types. Requires feed_type and filter_type
         * @param {boolean} [with_recasts] Include recasts in the response, true by default
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)
         *
         */
        async fetchFeed(feed_type, filter_type, fid, fids, parent_url, channel_id, members_only, embed_url, embed_types, with_recasts, limit, cursor, viewer_fid, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFeed(feed_type, filter_type, fid, fids, parent_url, channel_id, members_only, embed_url, embed_types, with_recasts, limit, cursor, viewer_fid, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FeedApi.fetchFeed']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch feed based on channel IDs
         * @summary By channel IDs
         * @param {string} channel_ids Comma separated list of channel IDs e.g. neynar,farcaster
         * @param {boolean} [with_recasts] Include recasts in the response, true by default
         * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
         * @param {boolean} [with_replies] Include replies in the response, false by default
         * @param {boolean} [members_only] Only include casts from members of the channel. True by default.
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {boolean} [should_moderate] If true, only casts that have been liked by the moderator (if one exists) will be returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)
         *
         */
        async fetchFeedByChannelIds(channel_ids, with_recasts, viewer_fid, with_replies, members_only, limit, cursor, should_moderate, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFeedByChannelIds(channel_ids, with_recasts, viewer_fid, with_replies, members_only, limit, cursor, should_moderate, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FeedApi.fetchFeedByChannelIds']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch feed based on parent URLs
         * @summary By parent URLs
         * @param {string} parent_urls Comma separated list of parent_urls
         * @param {boolean} [with_recasts] Include recasts in the response, true by default
         * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
         * @param {boolean} [with_replies] Include replies in the response, false by default
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)
         *
         */
        async fetchFeedByParentUrls(parent_urls, with_recasts, viewer_fid, with_replies, limit, cursor, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFeedByParentUrls(parent_urls, with_recasts, viewer_fid, with_replies, limit, cursor, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FeedApi.fetchFeedByParentUrls']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch a personalized For You feed for a user
         * @summary For you
         * @param {number} fid FID of user whose feed you want to create
         * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
         * @param {ForYouProvider} [provider]
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 50)
         * @param {string} [cursor] Pagination cursor.
         * @param {string} [provider_metadata] provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)
         *
         */
        async fetchFeedForYou(fid, viewer_fid, provider, limit, cursor, provider_metadata, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFeedForYou(fid, viewer_fid, provider, limit, cursor, provider_metadata, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FeedApi.fetchFeedForYou']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch feed of casts with Frames, reverse chronological order
         * @summary Casts with Frames
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)
         *
         */
        async fetchFramesOnlyFeed(limit, viewer_fid, cursor, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchFramesOnlyFeed(limit, viewer_fid, cursor, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FeedApi.fetchFramesOnlyFeed']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
         * @summary 10 most popular casts
         * @param {number} fid FID of user whose feed you want to create
         * @param {number} [viewer_fid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)
         *
         */
        async fetchPopularCastsByUser(fid, viewer_fid, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchPopularCastsByUser(fid, viewer_fid, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FeedApi.fetchPopularCastsByUser']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch recent replies and recasts for a given user FID; sorted by most recent first
         * @summary Replies and recasts
         * @param {number} fid FID of user whose replies and recasts you want to fetch
         * @param {FetchRepliesAndRecastsForUserFilterEnum} [filter] filter to fetch only replies or recasts
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 50)
         * @param {string} [cursor] Pagination cursor.
         * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)
         *
         */
        async fetchRepliesAndRecastsForUser(fid, filter, limit, cursor, viewer_fid, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchRepliesAndRecastsForUser(fid, filter, limit, cursor, viewer_fid, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FeedApi.fetchRepliesAndRecastsForUser']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.
         * @summary Trending casts
         * @param {number} [limit] Number of results to fetch  (Default: 10, Maximum: 10)
         * @param {string} [cursor] Pagination cursor
         * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
         * @param {FetchTrendingFeedTimeWindowEnum} [time_window] Time window for trending casts (7d window for channel feeds only)
         * @param {string} [channel_id] Channel ID to filter trending casts. Less active channels might have no casts in the time window selected.
         * @param {FeedTrendingProvider} [provider] The provider of the trending casts feed.
         * @param {string} [provider_metadata] provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)
         *
         */
        async fetchTrendingFeed(limit, cursor, viewer_fid, time_window, channel_id, provider, provider_metadata, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchTrendingFeed(limit, cursor, viewer_fid, time_window, channel_id, provider, provider_metadata, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FeedApi.fetchTrendingFeed']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch feed based on who a user is following
         * @summary Following
         * @param {number} fid FID of user whose feed you want to create
         * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
         * @param {boolean} [with_recasts] Include recasts in the response, true by default
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)
         *
         */
        async fetchUserFollowingFeed(fid, viewer_fid, with_recasts, limit, cursor, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchUserFollowingFeed(fid, viewer_fid, with_recasts, limit, cursor, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['FeedApi.fetchUserFollowingFeed']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.FeedApiFp = FeedApiFp;
/**
 * FeedApi - factory interface
 * @export
 */
const FeedApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.FeedApiFp)(configuration);
    return {
        /**
         * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel
         * @summary Chronologically
         * @param {FeedApiFetchCastsForUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)
         *
         */
        fetchCastsForUser(requestParameters, options) {
            return localVarFp.fetchCastsForUser(requestParameters.fid, requestParameters.viewer_fid, requestParameters.limit, requestParameters.cursor, requestParameters.include_replies, requestParameters.parent_url, requestParameters.channel_id, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.
         * @summary By filters
         * @param {FeedApiFetchFeedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)
         *
         */
        fetchFeed(requestParameters, options) {
            return localVarFp.fetchFeed(requestParameters.feed_type, requestParameters.filter_type, requestParameters.fid, requestParameters.fids, requestParameters.parent_url, requestParameters.channel_id, requestParameters.members_only, requestParameters.embed_url, requestParameters.embed_types, requestParameters.with_recasts, requestParameters.limit, requestParameters.cursor, requestParameters.viewer_fid, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch feed based on channel IDs
         * @summary By channel IDs
         * @param {FeedApiFetchFeedByChannelIdsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)
         *
         */
        fetchFeedByChannelIds(requestParameters, options) {
            return localVarFp.fetchFeedByChannelIds(requestParameters.channel_ids, requestParameters.with_recasts, requestParameters.viewer_fid, requestParameters.with_replies, requestParameters.members_only, requestParameters.limit, requestParameters.cursor, requestParameters.should_moderate, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch feed based on parent URLs
         * @summary By parent URLs
         * @param {FeedApiFetchFeedByParentUrlsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)
         *
         */
        fetchFeedByParentUrls(requestParameters, options) {
            return localVarFp.fetchFeedByParentUrls(requestParameters.parent_urls, requestParameters.with_recasts, requestParameters.viewer_fid, requestParameters.with_replies, requestParameters.limit, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a personalized For You feed for a user
         * @summary For you
         * @param {FeedApiFetchFeedForYouRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)
         *
         */
        fetchFeedForYou(requestParameters, options) {
            return localVarFp.fetchFeedForYou(requestParameters.fid, requestParameters.viewer_fid, requestParameters.provider, requestParameters.limit, requestParameters.cursor, requestParameters.provider_metadata, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch feed of casts with Frames, reverse chronological order
         * @summary Casts with Frames
         * @param {FeedApiFetchFramesOnlyFeedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)
         *
         */
        fetchFramesOnlyFeed(requestParameters = {}, options) {
            return localVarFp.fetchFramesOnlyFeed(requestParameters.limit, requestParameters.viewer_fid, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
         * @summary 10 most popular casts
         * @param {FeedApiFetchPopularCastsByUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)
         *
         */
        fetchPopularCastsByUser(requestParameters, options) {
            return localVarFp.fetchPopularCastsByUser(requestParameters.fid, requestParameters.viewer_fid, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch recent replies and recasts for a given user FID; sorted by most recent first
         * @summary Replies and recasts
         * @param {FeedApiFetchRepliesAndRecastsForUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)
         *
         */
        fetchRepliesAndRecastsForUser(requestParameters, options) {
            return localVarFp.fetchRepliesAndRecastsForUser(requestParameters.fid, requestParameters.filter, requestParameters.limit, requestParameters.cursor, requestParameters.viewer_fid, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.
         * @summary Trending casts
         * @param {FeedApiFetchTrendingFeedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)
         *
         */
        fetchTrendingFeed(requestParameters = {}, options) {
            return localVarFp.fetchTrendingFeed(requestParameters.limit, requestParameters.cursor, requestParameters.viewer_fid, requestParameters.time_window, requestParameters.channel_id, requestParameters.provider, requestParameters.provider_metadata, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch feed based on who a user is following
         * @summary Following
         * @param {FeedApiFetchUserFollowingFeedRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)
         *
         */
        fetchUserFollowingFeed(requestParameters, options) {
            return localVarFp.fetchUserFollowingFeed(requestParameters.fid, requestParameters.viewer_fid, requestParameters.with_recasts, requestParameters.limit, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
    };
};
exports.FeedApiFactory = FeedApiFactory;
/**
 * FeedApi - object-oriented interface
 * @export
 * @class FeedApi
 * @extends {BaseAPI}
 */
class FeedApi extends base_1.BaseAPI {
    /**
     * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel
     * @summary Chronologically
     * @param {FeedApiFetchCastsForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)
     *
     */
    fetchCastsForUser(requestParameters, options) {
        return (0, exports.FeedApiFp)(this.configuration).fetchCastsForUser(requestParameters.fid, requestParameters.viewer_fid, requestParameters.limit, requestParameters.cursor, requestParameters.include_replies, requestParameters.parent_url, requestParameters.channel_id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.
     * @summary By filters
     * @param {FeedApiFetchFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)
     *
     */
    fetchFeed(requestParameters, options) {
        return (0, exports.FeedApiFp)(this.configuration).fetchFeed(requestParameters.feed_type, requestParameters.filter_type, requestParameters.fid, requestParameters.fids, requestParameters.parent_url, requestParameters.channel_id, requestParameters.members_only, requestParameters.embed_url, requestParameters.embed_types, requestParameters.with_recasts, requestParameters.limit, requestParameters.cursor, requestParameters.viewer_fid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch feed based on channel IDs
     * @summary By channel IDs
     * @param {FeedApiFetchFeedByChannelIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)
     *
     */
    fetchFeedByChannelIds(requestParameters, options) {
        return (0, exports.FeedApiFp)(this.configuration).fetchFeedByChannelIds(requestParameters.channel_ids, requestParameters.with_recasts, requestParameters.viewer_fid, requestParameters.with_replies, requestParameters.members_only, requestParameters.limit, requestParameters.cursor, requestParameters.should_moderate, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch feed based on parent URLs
     * @summary By parent URLs
     * @param {FeedApiFetchFeedByParentUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)
     *
     */
    fetchFeedByParentUrls(requestParameters, options) {
        return (0, exports.FeedApiFp)(this.configuration).fetchFeedByParentUrls(requestParameters.parent_urls, requestParameters.with_recasts, requestParameters.viewer_fid, requestParameters.with_replies, requestParameters.limit, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch a personalized For You feed for a user
     * @summary For you
     * @param {FeedApiFetchFeedForYouRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)
     *
     */
    fetchFeedForYou(requestParameters, options) {
        return (0, exports.FeedApiFp)(this.configuration).fetchFeedForYou(requestParameters.fid, requestParameters.viewer_fid, requestParameters.provider, requestParameters.limit, requestParameters.cursor, requestParameters.provider_metadata, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch feed of casts with Frames, reverse chronological order
     * @summary Casts with Frames
     * @param {FeedApiFetchFramesOnlyFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)
     *
     */
    fetchFramesOnlyFeed(requestParameters = {}, options) {
        return (0, exports.FeedApiFp)(this.configuration).fetchFramesOnlyFeed(requestParameters.limit, requestParameters.viewer_fid, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
     * @summary 10 most popular casts
     * @param {FeedApiFetchPopularCastsByUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)
     *
     */
    fetchPopularCastsByUser(requestParameters, options) {
        return (0, exports.FeedApiFp)(this.configuration).fetchPopularCastsByUser(requestParameters.fid, requestParameters.viewer_fid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch recent replies and recasts for a given user FID; sorted by most recent first
     * @summary Replies and recasts
     * @param {FeedApiFetchRepliesAndRecastsForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)
     *
     */
    fetchRepliesAndRecastsForUser(requestParameters, options) {
        return (0, exports.FeedApiFp)(this.configuration).fetchRepliesAndRecastsForUser(requestParameters.fid, requestParameters.filter, requestParameters.limit, requestParameters.cursor, requestParameters.viewer_fid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.
     * @summary Trending casts
     * @param {FeedApiFetchTrendingFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)
     *
     */
    fetchTrendingFeed(requestParameters = {}, options) {
        return (0, exports.FeedApiFp)(this.configuration).fetchTrendingFeed(requestParameters.limit, requestParameters.cursor, requestParameters.viewer_fid, requestParameters.time_window, requestParameters.channel_id, requestParameters.provider, requestParameters.provider_metadata, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch feed based on who a user is following
     * @summary Following
     * @param {FeedApiFetchUserFollowingFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)
     *
     */
    fetchUserFollowingFeed(requestParameters, options) {
        return (0, exports.FeedApiFp)(this.configuration).fetchUserFollowingFeed(requestParameters.fid, requestParameters.viewer_fid, requestParameters.with_recasts, requestParameters.limit, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.FeedApi = FeedApi;
/**
 * @export
 */
exports.FetchRepliesAndRecastsForUserFilterEnum = {
    Replies: 'replies',
    Recasts: 'recasts',
    All: 'all'
};
/**
 * @export
 */
exports.FetchTrendingFeedTimeWindowEnum = {
    _1h: '1h',
    _6h: '6h',
    _12h: '12h',
    _24h: '24h',
    _7d: '7d'
};
