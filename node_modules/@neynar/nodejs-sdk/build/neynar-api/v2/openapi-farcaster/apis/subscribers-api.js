"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscribersApi = exports.SubscribersApiFactory = exports.SubscribersApiFp = exports.SubscribersApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * SubscribersApi - axios parameter creator
 * @export
 */
const SubscribersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Fetch what FIDs and contracts a FID is subscribed to.
         * @summary Subscribed to
         * @param {number} fid
         * @param {SubscriptionProvider} subscription_provider
         * @param {number} [viewer_fid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<SubscribedToResponse>} A promise that resolves to a `SubscribedToResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscribed-to-for-fid)
         *
         */
        fetchSubscribedToForFid: async (fid, subscription_provider, viewer_fid, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('fetchSubscribedToForFid', 'fid', fid);
            // verify required parameter 'subscription_provider' is not null or undefined
            (0, common_1.assertParamExists)('fetchSubscribedToForFid', 'subscription_provider', subscription_provider);
            const localVarPath = `/farcaster/user/subscribed_to`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (viewer_fid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewer_fid;
            }
            if (subscription_provider !== undefined) {
                localVarQueryParameter['subscription_provider'] = subscription_provider;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch subscribers for a given FID\'s contracts. Doesn\'t return addresses that don\'t have an FID.
         * @summary Subscribers of a user
         * @param {number} fid
         * @param {SubscriptionProviders} subscription_provider
         * @param {number} [viewer_fid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<SubscribersResponse>} A promise that resolves to a `SubscribersResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscribers-for-fid)
         *
         */
        fetchSubscribersForFid: async (fid, subscription_provider, viewer_fid, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('fetchSubscribersForFid', 'fid', fid);
            // verify required parameter 'subscription_provider' is not null or undefined
            (0, common_1.assertParamExists)('fetchSubscribersForFid', 'subscription_provider', subscription_provider);
            const localVarPath = `/farcaster/user/subscribers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (viewer_fid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewer_fid;
            }
            if (subscription_provider !== undefined) {
                localVarQueryParameter['subscription_provider'] = subscription_provider;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch created subscriptions for a given FID\'s.
         * @summary Subscriptions created by FID
         * @param {number} fid
         * @param {SubscriptionProvider} subscription_provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<SubscriptionsResponse>} A promise that resolves to a `SubscriptionsResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscriptions-for-fid)
         *
         */
        fetchSubscriptionsForFid: async (fid, subscription_provider, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('fetchSubscriptionsForFid', 'fid', fid);
            // verify required parameter 'subscription_provider' is not null or undefined
            (0, common_1.assertParamExists)('fetchSubscriptionsForFid', 'subscription_provider', subscription_provider);
            const localVarPath = `/farcaster/user/subscriptions_created`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (subscription_provider !== undefined) {
                localVarQueryParameter['subscription_provider'] = subscription_provider;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.SubscribersApiAxiosParamCreator = SubscribersApiAxiosParamCreator;
/**
 * SubscribersApi - functional programming interface
 * @export
 */
const SubscribersApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.SubscribersApiAxiosParamCreator)(configuration);
    return {
        /**
         * Fetch what FIDs and contracts a FID is subscribed to.
         * @summary Subscribed to
         * @param {number} fid
         * @param {SubscriptionProvider} subscription_provider
         * @param {number} [viewer_fid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<SubscribedToResponse>} A promise that resolves to a `SubscribedToResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscribed-to-for-fid)
         *
         */
        async fetchSubscribedToForFid(fid, subscription_provider, viewer_fid, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchSubscribedToForFid(fid, subscription_provider, viewer_fid, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SubscribersApi.fetchSubscribedToForFid']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch subscribers for a given FID\'s contracts. Doesn\'t return addresses that don\'t have an FID.
         * @summary Subscribers of a user
         * @param {number} fid
         * @param {SubscriptionProviders} subscription_provider
         * @param {number} [viewer_fid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<SubscribersResponse>} A promise that resolves to a `SubscribersResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscribers-for-fid)
         *
         */
        async fetchSubscribersForFid(fid, subscription_provider, viewer_fid, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchSubscribersForFid(fid, subscription_provider, viewer_fid, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SubscribersApi.fetchSubscribersForFid']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch created subscriptions for a given FID\'s.
         * @summary Subscriptions created by FID
         * @param {number} fid
         * @param {SubscriptionProvider} subscription_provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<SubscriptionsResponse>} A promise that resolves to a `SubscriptionsResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscriptions-for-fid)
         *
         */
        async fetchSubscriptionsForFid(fid, subscription_provider, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchSubscriptionsForFid(fid, subscription_provider, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['SubscribersApi.fetchSubscriptionsForFid']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.SubscribersApiFp = SubscribersApiFp;
/**
 * SubscribersApi - factory interface
 * @export
 */
const SubscribersApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.SubscribersApiFp)(configuration);
    return {
        /**
         * Fetch what FIDs and contracts a FID is subscribed to.
         * @summary Subscribed to
         * @param {SubscribersApiFetchSubscribedToForFidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<SubscribedToResponse>} A promise that resolves to a `SubscribedToResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscribed-to-for-fid)
         *
         */
        fetchSubscribedToForFid(requestParameters, options) {
            return localVarFp.fetchSubscribedToForFid(requestParameters.fid, requestParameters.subscription_provider, requestParameters.viewer_fid, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch subscribers for a given FID\'s contracts. Doesn\'t return addresses that don\'t have an FID.
         * @summary Subscribers of a user
         * @param {SubscribersApiFetchSubscribersForFidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<SubscribersResponse>} A promise that resolves to a `SubscribersResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscribers-for-fid)
         *
         */
        fetchSubscribersForFid(requestParameters, options) {
            return localVarFp.fetchSubscribersForFid(requestParameters.fid, requestParameters.subscription_provider, requestParameters.viewer_fid, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch created subscriptions for a given FID\'s.
         * @summary Subscriptions created by FID
         * @param {SubscribersApiFetchSubscriptionsForFidRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<SubscriptionsResponse>} A promise that resolves to a `SubscriptionsResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscriptions-for-fid)
         *
         */
        fetchSubscriptionsForFid(requestParameters, options) {
            return localVarFp.fetchSubscriptionsForFid(requestParameters.fid, requestParameters.subscription_provider, options).then((request) => request(axios, basePath));
        },
    };
};
exports.SubscribersApiFactory = SubscribersApiFactory;
/**
 * SubscribersApi - object-oriented interface
 * @export
 * @class SubscribersApi
 * @extends {BaseAPI}
 */
class SubscribersApi extends base_1.BaseAPI {
    /**
     * Fetch what FIDs and contracts a FID is subscribed to.
     * @summary Subscribed to
     * @param {SubscribersApiFetchSubscribedToForFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscribersApi
     * @returns {Promise<SubscribedToResponse>} A promise that resolves to a `SubscribedToResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscribed-to-for-fid)
     *
     */
    fetchSubscribedToForFid(requestParameters, options) {
        return (0, exports.SubscribersApiFp)(this.configuration).fetchSubscribedToForFid(requestParameters.fid, requestParameters.subscription_provider, requestParameters.viewer_fid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch subscribers for a given FID\'s contracts. Doesn\'t return addresses that don\'t have an FID.
     * @summary Subscribers of a user
     * @param {SubscribersApiFetchSubscribersForFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscribersApi
     * @returns {Promise<SubscribersResponse>} A promise that resolves to a `SubscribersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscribers-for-fid)
     *
     */
    fetchSubscribersForFid(requestParameters, options) {
        return (0, exports.SubscribersApiFp)(this.configuration).fetchSubscribersForFid(requestParameters.fid, requestParameters.subscription_provider, requestParameters.viewer_fid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch created subscriptions for a given FID\'s.
     * @summary Subscriptions created by FID
     * @param {SubscribersApiFetchSubscriptionsForFidRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscribersApi
     * @returns {Promise<SubscriptionsResponse>} A promise that resolves to a `SubscriptionsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscriptions-for-fid)
     *
     */
    fetchSubscriptionsForFid(requestParameters, options) {
        return (0, exports.SubscribersApiFp)(this.configuration).fetchSubscriptionsForFid(requestParameters.fid, requestParameters.subscription_provider, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.SubscribersApi = SubscribersApi;
