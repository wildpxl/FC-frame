"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NotificationsApi = exports.NotificationsApiFactory = exports.NotificationsApiFp = exports.NotificationsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * NotificationsApi - axios parameter creator
 * @export
 */
const NotificationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Returns a list of notifications for a specific FID.
         * @summary For user
         * @param {number} fid FID of the user you you want to fetch notifications for. The response will respect this user\&#39;s mutes and blocks.
         * @param {string} [type] Notification type to fetch. Comma separated values of follows, recasts, likes, mentions, replies.
         * @param {boolean} [priority_mode] When true, only returns notifications from power badge users and users that the viewer follows (if viewer_fid is provided).
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-all-notifications)
         *
         */
        fetchAllNotifications: async (fid, type, priority_mode, cursor, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('fetchAllNotifications', 'fid', fid);
            const localVarPath = `/farcaster/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (priority_mode !== undefined) {
                localVarQueryParameter['priority_mode'] = priority_mode;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of notifications for a user in specific channels
         * @summary For user by channel
         * @param {number} fid FID of the user you you want to fetch notifications for. The response will respect this user\&#39;s mutes and blocks.
         * @param {string} channel_ids Comma separated channel_ids (find list of all channels here - https://docs.neynar.com/reference/list-all-channels)
         * @param {boolean} [priority_mode] When true, only returns notifications from power badge users and users that the viewer follows (if viewer_fid is provided).
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-notifications-for-user)
         *
         */
        fetchChannelNotificationsForUser: async (fid, channel_ids, priority_mode, cursor, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('fetchChannelNotificationsForUser', 'fid', fid);
            // verify required parameter 'channel_ids' is not null or undefined
            (0, common_1.assertParamExists)('fetchChannelNotificationsForUser', 'channel_ids', channel_ids);
            const localVarPath = `/farcaster/notifications/channel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (channel_ids !== undefined) {
                localVarQueryParameter['channel_ids'] = channel_ids;
            }
            if (priority_mode !== undefined) {
                localVarQueryParameter['priority_mode'] = priority_mode;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of notifications for a user in specific parent_urls
         * @summary For user by parent_urls
         * @param {number} fid FID of the user you you want to fetch notifications for. The response will respect this user\&#39;s mutes and blocks.
         * @param {string} parent_urls Comma separated parent_urls
         * @param {boolean} [priority_mode] When true, only returns notifications from power badge users and users that the viewer follows (if viewer_fid is provided).
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notifications-by-parent-url-for-user)
         *
         */
        fetchNotificationsByParentUrlForUser: async (fid, parent_urls, priority_mode, cursor, options = {}) => {
            // verify required parameter 'fid' is not null or undefined
            (0, common_1.assertParamExists)('fetchNotificationsByParentUrlForUser', 'fid', fid);
            // verify required parameter 'parent_urls' is not null or undefined
            (0, common_1.assertParamExists)('fetchNotificationsByParentUrlForUser', 'parent_urls', parent_urls);
            const localVarPath = `/farcaster/notifications/parent_url`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (fid !== undefined) {
                localVarQueryParameter['fid'] = fid;
            }
            if (parent_urls !== undefined) {
                localVarQueryParameter['parent_urls'] = parent_urls;
            }
            if (priority_mode !== undefined) {
                localVarQueryParameter['priority_mode'] = priority_mode;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark notifications as seen
         * @summary Mark as seen
         * @param {MarkNotificationsAsSeenReqBody} mark_notifications_as_seen_req_body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/mark-notifications-as-seen)
         *
         */
        markNotificationsAsSeen: async (mark_notifications_as_seen_req_body, options = {}) => {
            // verify required parameter 'mark_notifications_as_seen_req_body' is not null or undefined
            (0, common_1.assertParamExists)('markNotificationsAsSeen', 'mark_notifications_as_seen_req_body', mark_notifications_as_seen_req_body);
            const localVarPath = `/farcaster/notifications/seen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(mark_notifications_as_seen_req_body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.NotificationsApiAxiosParamCreator = NotificationsApiAxiosParamCreator;
/**
 * NotificationsApi - functional programming interface
 * @export
 */
const NotificationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.NotificationsApiAxiosParamCreator)(configuration);
    return {
        /**
         * Returns a list of notifications for a specific FID.
         * @summary For user
         * @param {number} fid FID of the user you you want to fetch notifications for. The response will respect this user\&#39;s mutes and blocks.
         * @param {string} [type] Notification type to fetch. Comma separated values of follows, recasts, likes, mentions, replies.
         * @param {boolean} [priority_mode] When true, only returns notifications from power badge users and users that the viewer follows (if viewer_fid is provided).
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-all-notifications)
         *
         */
        async fetchAllNotifications(fid, type, priority_mode, cursor, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchAllNotifications(fid, type, priority_mode, cursor, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['NotificationsApi.fetchAllNotifications']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of notifications for a user in specific channels
         * @summary For user by channel
         * @param {number} fid FID of the user you you want to fetch notifications for. The response will respect this user\&#39;s mutes and blocks.
         * @param {string} channel_ids Comma separated channel_ids (find list of all channels here - https://docs.neynar.com/reference/list-all-channels)
         * @param {boolean} [priority_mode] When true, only returns notifications from power badge users and users that the viewer follows (if viewer_fid is provided).
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-notifications-for-user)
         *
         */
        async fetchChannelNotificationsForUser(fid, channel_ids, priority_mode, cursor, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchChannelNotificationsForUser(fid, channel_ids, priority_mode, cursor, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['NotificationsApi.fetchChannelNotificationsForUser']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns a list of notifications for a user in specific parent_urls
         * @summary For user by parent_urls
         * @param {number} fid FID of the user you you want to fetch notifications for. The response will respect this user\&#39;s mutes and blocks.
         * @param {string} parent_urls Comma separated parent_urls
         * @param {boolean} [priority_mode] When true, only returns notifications from power badge users and users that the viewer follows (if viewer_fid is provided).
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notifications-by-parent-url-for-user)
         *
         */
        async fetchNotificationsByParentUrlForUser(fid, parent_urls, priority_mode, cursor, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchNotificationsByParentUrlForUser(fid, parent_urls, priority_mode, cursor, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['NotificationsApi.fetchNotificationsByParentUrlForUser']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Mark notifications as seen
         * @summary Mark as seen
         * @param {MarkNotificationsAsSeenReqBody} mark_notifications_as_seen_req_body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/mark-notifications-as-seen)
         *
         */
        async markNotificationsAsSeen(mark_notifications_as_seen_req_body, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.markNotificationsAsSeen(mark_notifications_as_seen_req_body, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['NotificationsApi.markNotificationsAsSeen']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.NotificationsApiFp = NotificationsApiFp;
/**
 * NotificationsApi - factory interface
 * @export
 */
const NotificationsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.NotificationsApiFp)(configuration);
    return {
        /**
         * Returns a list of notifications for a specific FID.
         * @summary For user
         * @param {NotificationsApiFetchAllNotificationsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-all-notifications)
         *
         */
        fetchAllNotifications(requestParameters, options) {
            return localVarFp.fetchAllNotifications(requestParameters.fid, requestParameters.type, requestParameters.priority_mode, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of notifications for a user in specific channels
         * @summary For user by channel
         * @param {NotificationsApiFetchChannelNotificationsForUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-notifications-for-user)
         *
         */
        fetchChannelNotificationsForUser(requestParameters, options) {
            return localVarFp.fetchChannelNotificationsForUser(requestParameters.fid, requestParameters.channel_ids, requestParameters.priority_mode, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of notifications for a user in specific parent_urls
         * @summary For user by parent_urls
         * @param {NotificationsApiFetchNotificationsByParentUrlForUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notifications-by-parent-url-for-user)
         *
         */
        fetchNotificationsByParentUrlForUser(requestParameters, options) {
            return localVarFp.fetchNotificationsByParentUrlForUser(requestParameters.fid, requestParameters.parent_urls, requestParameters.priority_mode, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Mark notifications as seen
         * @summary Mark as seen
         * @param {NotificationsApiMarkNotificationsAsSeenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/mark-notifications-as-seen)
         *
         */
        markNotificationsAsSeen(requestParameters, options) {
            return localVarFp.markNotificationsAsSeen(requestParameters.mark_notifications_as_seen_req_body, options).then((request) => request(axios, basePath));
        },
    };
};
exports.NotificationsApiFactory = NotificationsApiFactory;
/**
 * NotificationsApi - object-oriented interface
 * @export
 * @class NotificationsApi
 * @extends {BaseAPI}
 */
class NotificationsApi extends base_1.BaseAPI {
    /**
     * Returns a list of notifications for a specific FID.
     * @summary For user
     * @param {NotificationsApiFetchAllNotificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-all-notifications)
     *
     */
    fetchAllNotifications(requestParameters, options) {
        return (0, exports.NotificationsApiFp)(this.configuration).fetchAllNotifications(requestParameters.fid, requestParameters.type, requestParameters.priority_mode, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of notifications for a user in specific channels
     * @summary For user by channel
     * @param {NotificationsApiFetchChannelNotificationsForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-notifications-for-user)
     *
     */
    fetchChannelNotificationsForUser(requestParameters, options) {
        return (0, exports.NotificationsApiFp)(this.configuration).fetchChannelNotificationsForUser(requestParameters.fid, requestParameters.channel_ids, requestParameters.priority_mode, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Returns a list of notifications for a user in specific parent_urls
     * @summary For user by parent_urls
     * @param {NotificationsApiFetchNotificationsByParentUrlForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     * @returns {Promise<NotificationsResponse>} A promise that resolves to a `NotificationsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-notifications-by-parent-url-for-user)
     *
     */
    fetchNotificationsByParentUrlForUser(requestParameters, options) {
        return (0, exports.NotificationsApiFp)(this.configuration).fetchNotificationsByParentUrlForUser(requestParameters.fid, requestParameters.parent_urls, requestParameters.priority_mode, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Mark notifications as seen
     * @summary Mark as seen
     * @param {NotificationsApiMarkNotificationsAsSeenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationsApi
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/mark-notifications-as-seen)
     *
     */
    markNotificationsAsSeen(requestParameters, options) {
        return (0, exports.NotificationsApiFp)(this.configuration).markNotificationsAsSeen(requestParameters.mark_notifications_as_seen_req_body, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.NotificationsApi = NotificationsApi;
