/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { SubscriptionCheckResponse } from '../models';
/**
 * StpApi - axios parameter creator
 * @export
 */
export declare const StpApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Check if a wallet address is subscribed to a given STP contract.
     * @summary Subscription check by wallet address
     * @param {string} addresses Comma separated list of Ethereum addresses, up to 350 at a time
     * @param {string} contract_address Ethereum address of the STP contract
     * @param {string} chain_id Chain ID of the STP contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<SubscriptionCheckResponse>} A promise that resolves to a `SubscriptionCheckResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscription-check)
     *
     */
    fetchSubscriptionCheck: (addresses: string, contract_address: string, chain_id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StpApi - functional programming interface
 * @export
 */
export declare const StpApiFp: (configuration?: Configuration) => {
    /**
     * Check if a wallet address is subscribed to a given STP contract.
     * @summary Subscription check by wallet address
     * @param {string} addresses Comma separated list of Ethereum addresses, up to 350 at a time
     * @param {string} contract_address Ethereum address of the STP contract
     * @param {string} chain_id Chain ID of the STP contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<SubscriptionCheckResponse>} A promise that resolves to a `SubscriptionCheckResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscription-check)
     *
     */
    fetchSubscriptionCheck(addresses: string, contract_address: string, chain_id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionCheckResponse>>;
};
/**
 * StpApi - factory interface
 * @export
 */
export declare const StpApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Check if a wallet address is subscribed to a given STP contract.
     * @summary Subscription check by wallet address
     * @param {StpApiFetchSubscriptionCheckRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<SubscriptionCheckResponse>} A promise that resolves to a `SubscriptionCheckResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscription-check)
     *
     */
    fetchSubscriptionCheck(requestParameters: StpApiFetchSubscriptionCheckRequest, options?: RawAxiosRequestConfig): AxiosPromise<SubscriptionCheckResponse>;
};
/**
 * StpApi - interface
 * @export
 * @interface StpApi
 */
export interface StpApiInterface {
    /**
     * Check if a wallet address is subscribed to a given STP contract.
     * @summary Subscription check by wallet address
     * @param {StpApiFetchSubscriptionCheckRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StpApiInterface
     * @returns {Promise<SubscriptionCheckResponse>} A promise that resolves to a `SubscriptionCheckResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscription-check)
     *
     */
    fetchSubscriptionCheck(requestParameters: StpApiFetchSubscriptionCheckRequest, options?: RawAxiosRequestConfig): AxiosPromise<SubscriptionCheckResponse>;
}
/**
 * Request parameters for fetchSubscriptionCheck operation in StpApi.
 * @export
 * @interface StpApiFetchSubscriptionCheckRequest
 */
export interface StpApiFetchSubscriptionCheckRequest {
    /**
     * Comma separated list of Ethereum addresses, up to 350 at a time
     *
     *
     * @type {string}
     * @memberof StpApiFetchSubscriptionCheck
     */
    readonly addresses: string;
    /**
     * Ethereum address of the STP contract
     *
     *
     * @type {string}
     * @memberof StpApiFetchSubscriptionCheck
     */
    readonly contract_address: string;
    /**
     * Chain ID of the STP contract
     *
     *
     * @type {string}
     * @memberof StpApiFetchSubscriptionCheck
     */
    readonly chain_id: string;
}
/**
 * StpApi - object-oriented interface
 * @export
 * @class StpApi
 * @extends {BaseAPI}
 */
export declare class StpApi extends BaseAPI implements StpApiInterface {
    /**
     * Check if a wallet address is subscribed to a given STP contract.
     * @summary Subscription check by wallet address
     * @param {StpApiFetchSubscriptionCheckRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StpApi
     * @returns {Promise<SubscriptionCheckResponse>} A promise that resolves to a `SubscriptionCheckResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscription-check)
     *
     */
    fetchSubscriptionCheck(requestParameters: StpApiFetchSubscriptionCheckRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SubscriptionCheckResponse, any>>;
}
