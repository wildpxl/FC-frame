/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { AuthorizationUrlResponse } from '../models';
import type { AuthorizationUrlResponseType } from '../models';
import type { DeveloperManagedSigner } from '../models';
import type { RegisterDeveloperManagedSignedKeyReqBody } from '../models';
import type { RegisterSignerKeyReqBody } from '../models';
import type { Signer } from '../models';
/**
 * SignerApi - axios parameter creator
 * @export
 */
export declare const SignerApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Creates a signer and returns the signer status. \\ **Note**: While tesing please reuse the signer, it costs money to approve a signer.
     * @summary Create signer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/create-signer)
     *
     */
    createSigner: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
     * @summary Fetch authorization url
     * @param {string} client_id
     * @param {AuthorizationUrlResponseType} response_type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<AuthorizationUrlResponse>} A promise that resolves to a `AuthorizationUrlResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-authorization-url)
     *
     */
    fetchAuthorizationUrl: (client_id: string, response_type: AuthorizationUrlResponseType, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches the status of a developer managed signer by public key
     * @summary Status by public key
     * @param {string} public_key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-signer)
     *
     */
    lookupDeveloperManagedSigner: (public_key: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
     * @summary Status
     * @param {string} signer_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-signer)
     *
     */
    lookupSigner: (signer_uuid: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
     * @summary Publish message
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<object>} A promise that resolves to a `object` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-message-to-farcaster)
     *
     */
    publishMessageToFarcaster: (body: object, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Registers an app FID, deadline and a signature. Returns the signer status with an approval url.
     * @summary Register Signed Key
     * @param {RegisterSignerKeyReqBody} register_signer_key_req_body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key)
     *
     */
    registerSignedKey: (register_signer_key_req_body: RegisterSignerKeyReqBody, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Registers an signed key and returns the developer managed signer status with an approval url.
     * @summary Register Signed Key
     * @param {RegisterDeveloperManagedSignedKeyReqBody} register_developer_managed_signed_key_req_body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer)
     *
     */
    registerSignedKeyForDeveloperManagedSigner: (register_developer_managed_signed_key_req_body: RegisterDeveloperManagedSignedKeyReqBody, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SignerApi - functional programming interface
 * @export
 */
export declare const SignerApiFp: (configuration?: Configuration) => {
    /**
     * Creates a signer and returns the signer status. \\ **Note**: While tesing please reuse the signer, it costs money to approve a signer.
     * @summary Create signer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/create-signer)
     *
     */
    createSigner(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signer>>;
    /**
     * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
     * @summary Fetch authorization url
     * @param {string} client_id
     * @param {AuthorizationUrlResponseType} response_type
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<AuthorizationUrlResponse>} A promise that resolves to a `AuthorizationUrlResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-authorization-url)
     *
     */
    fetchAuthorizationUrl(client_id: string, response_type: AuthorizationUrlResponseType, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorizationUrlResponse>>;
    /**
     * Fetches the status of a developer managed signer by public key
     * @summary Status by public key
     * @param {string} public_key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-signer)
     *
     */
    lookupDeveloperManagedSigner(public_key: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeveloperManagedSigner>>;
    /**
     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
     * @summary Status
     * @param {string} signer_uuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-signer)
     *
     */
    lookupSigner(signer_uuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signer>>;
    /**
     * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
     * @summary Publish message
     * @param {object} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<object>} A promise that resolves to a `object` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-message-to-farcaster)
     *
     */
    publishMessageToFarcaster(body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>>;
    /**
     * Registers an app FID, deadline and a signature. Returns the signer status with an approval url.
     * @summary Register Signed Key
     * @param {RegisterSignerKeyReqBody} register_signer_key_req_body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key)
     *
     */
    registerSignedKey(register_signer_key_req_body: RegisterSignerKeyReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Signer>>;
    /**
     * Registers an signed key and returns the developer managed signer status with an approval url.
     * @summary Register Signed Key
     * @param {RegisterDeveloperManagedSignedKeyReqBody} register_developer_managed_signed_key_req_body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer)
     *
     */
    registerSignedKeyForDeveloperManagedSigner(register_developer_managed_signed_key_req_body: RegisterDeveloperManagedSignedKeyReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeveloperManagedSigner>>;
};
/**
 * SignerApi - factory interface
 * @export
 */
export declare const SignerApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Creates a signer and returns the signer status. \\ **Note**: While tesing please reuse the signer, it costs money to approve a signer.
     * @summary Create signer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/create-signer)
     *
     */
    createSigner(options?: RawAxiosRequestConfig): AxiosPromise<Signer>;
    /**
     * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
     * @summary Fetch authorization url
     * @param {SignerApiFetchAuthorizationUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<AuthorizationUrlResponse>} A promise that resolves to a `AuthorizationUrlResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-authorization-url)
     *
     */
    fetchAuthorizationUrl(requestParameters: SignerApiFetchAuthorizationUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthorizationUrlResponse>;
    /**
     * Fetches the status of a developer managed signer by public key
     * @summary Status by public key
     * @param {SignerApiLookupDeveloperManagedSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-signer)
     *
     */
    lookupDeveloperManagedSigner(requestParameters: SignerApiLookupDeveloperManagedSignerRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeveloperManagedSigner>;
    /**
     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
     * @summary Status
     * @param {SignerApiLookupSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-signer)
     *
     */
    lookupSigner(requestParameters: SignerApiLookupSignerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Signer>;
    /**
     * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
     * @summary Publish message
     * @param {SignerApiPublishMessageToFarcasterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<object>} A promise that resolves to a `object` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-message-to-farcaster)
     *
     */
    publishMessageToFarcaster(requestParameters: SignerApiPublishMessageToFarcasterRequest, options?: RawAxiosRequestConfig): AxiosPromise<object>;
    /**
     * Registers an app FID, deadline and a signature. Returns the signer status with an approval url.
     * @summary Register Signed Key
     * @param {SignerApiRegisterSignedKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key)
     *
     */
    registerSignedKey(requestParameters: SignerApiRegisterSignedKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<Signer>;
    /**
     * Registers an signed key and returns the developer managed signer status with an approval url.
     * @summary Register Signed Key
     * @param {SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer)
     *
     */
    registerSignedKeyForDeveloperManagedSigner(requestParameters: SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeveloperManagedSigner>;
};
/**
 * SignerApi - interface
 * @export
 * @interface SignerApi
 */
export interface SignerApiInterface {
    /**
     * Creates a signer and returns the signer status. \\ **Note**: While tesing please reuse the signer, it costs money to approve a signer.
     * @summary Create signer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/create-signer)
     *
     */
    createSigner(options?: RawAxiosRequestConfig): AxiosPromise<Signer>;
    /**
     * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
     * @summary Fetch authorization url
     * @param {SignerApiFetchAuthorizationUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<AuthorizationUrlResponse>} A promise that resolves to a `AuthorizationUrlResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-authorization-url)
     *
     */
    fetchAuthorizationUrl(requestParameters: SignerApiFetchAuthorizationUrlRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthorizationUrlResponse>;
    /**
     * Fetches the status of a developer managed signer by public key
     * @summary Status by public key
     * @param {SignerApiLookupDeveloperManagedSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-signer)
     *
     */
    lookupDeveloperManagedSigner(requestParameters: SignerApiLookupDeveloperManagedSignerRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeveloperManagedSigner>;
    /**
     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
     * @summary Status
     * @param {SignerApiLookupSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-signer)
     *
     */
    lookupSigner(requestParameters: SignerApiLookupSignerRequest, options?: RawAxiosRequestConfig): AxiosPromise<Signer>;
    /**
     * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
     * @summary Publish message
     * @param {SignerApiPublishMessageToFarcasterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<object>} A promise that resolves to a `object` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-message-to-farcaster)
     *
     */
    publishMessageToFarcaster(requestParameters: SignerApiPublishMessageToFarcasterRequest, options?: RawAxiosRequestConfig): AxiosPromise<object>;
    /**
     * Registers an app FID, deadline and a signature. Returns the signer status with an approval url.
     * @summary Register Signed Key
     * @param {SignerApiRegisterSignedKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key)
     *
     */
    registerSignedKey(requestParameters: SignerApiRegisterSignedKeyRequest, options?: RawAxiosRequestConfig): AxiosPromise<Signer>;
    /**
     * Registers an signed key and returns the developer managed signer status with an approval url.
     * @summary Register Signed Key
     * @param {SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApiInterface
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer)
     *
     */
    registerSignedKeyForDeveloperManagedSigner(requestParameters: SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeveloperManagedSigner>;
}
/**
 * Request parameters for fetchAuthorizationUrl operation in SignerApi.
 * @export
 * @interface SignerApiFetchAuthorizationUrlRequest
 */
export interface SignerApiFetchAuthorizationUrlRequest {
    /**
     *
     *
     *
     * @type {string}
     * @memberof SignerApiFetchAuthorizationUrl
     */
    readonly client_id: string;
    /**
     *
     *
     *
     * @type {AuthorizationUrlResponseType}
     * @memberof SignerApiFetchAuthorizationUrl
     */
    readonly response_type: AuthorizationUrlResponseType;
}
/**
 * Request parameters for lookupDeveloperManagedSigner operation in SignerApi.
 * @export
 * @interface SignerApiLookupDeveloperManagedSignerRequest
 */
export interface SignerApiLookupDeveloperManagedSignerRequest {
    /**
     *
     *
     *
     * @type {string}
     * @memberof SignerApiLookupDeveloperManagedSigner
     */
    readonly public_key: string;
}
/**
 * Request parameters for lookupSigner operation in SignerApi.
 * @export
 * @interface SignerApiLookupSignerRequest
 */
export interface SignerApiLookupSignerRequest {
    /**
     *
     *
     *
     * @type {string}
     * @memberof SignerApiLookupSigner
     */
    readonly signer_uuid: string;
}
/**
 * Request parameters for publishMessageToFarcaster operation in SignerApi.
 * @export
 * @interface SignerApiPublishMessageToFarcasterRequest
 */
export interface SignerApiPublishMessageToFarcasterRequest {
    /**
     *
     *
     *
     * @type {object}
     * @memberof SignerApiPublishMessageToFarcaster
     */
    readonly body: object;
}
/**
 * Request parameters for registerSignedKey operation in SignerApi.
 * @export
 * @interface SignerApiRegisterSignedKeyRequest
 */
export interface SignerApiRegisterSignedKeyRequest {
    /**
     *
     *
     *
     * @type {RegisterSignerKeyReqBody}
     * @memberof SignerApiRegisterSignedKey
     */
    readonly register_signer_key_req_body: RegisterSignerKeyReqBody;
}
/**
 * Request parameters for registerSignedKeyForDeveloperManagedSigner operation in SignerApi.
 * @export
 * @interface SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest
 */
export interface SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest {
    /**
     *
     *
     *
     * @type {RegisterDeveloperManagedSignedKeyReqBody}
     * @memberof SignerApiRegisterSignedKeyForDeveloperManagedSigner
     */
    readonly register_developer_managed_signed_key_req_body: RegisterDeveloperManagedSignedKeyReqBody;
}
/**
 * SignerApi - object-oriented interface
 * @export
 * @class SignerApi
 * @extends {BaseAPI}
 */
export declare class SignerApi extends BaseAPI implements SignerApiInterface {
    /**
     * Creates a signer and returns the signer status. \\ **Note**: While tesing please reuse the signer, it costs money to approve a signer.
     * @summary Create signer
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/create-signer)
     *
     */
    createSigner(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Signer, any>>;
    /**
     * Fetch authorization url (Fetched authorized url useful for SIWN login operation)
     * @summary Fetch authorization url
     * @param {SignerApiFetchAuthorizationUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<AuthorizationUrlResponse>} A promise that resolves to a `AuthorizationUrlResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-authorization-url)
     *
     */
    fetchAuthorizationUrl(requestParameters: SignerApiFetchAuthorizationUrlRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AuthorizationUrlResponse, any>>;
    /**
     * Fetches the status of a developer managed signer by public key
     * @summary Status by public key
     * @param {SignerApiLookupDeveloperManagedSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-developer-managed-signer)
     *
     */
    lookupDeveloperManagedSigner(requestParameters: SignerApiLookupDeveloperManagedSignerRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeveloperManagedSigner, any>>;
    /**
     * Gets information status of a signer by passing in a signer_uuid (Use post API to generate a signer)
     * @summary Status
     * @param {SignerApiLookupSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-signer)
     *
     */
    lookupSigner(requestParameters: SignerApiLookupSignerRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Signer, any>>;
    /**
     * Publish a message to farcaster. The message must be signed by a signer managed by the developer. Use the @farcaster/core library to construct and sign the message. Use the Message.toJSON method on the signed message and pass the JSON in the body of this POST request.
     * @summary Publish message
     * @param {SignerApiPublishMessageToFarcasterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<object>} A promise that resolves to a `object` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-message-to-farcaster)
     *
     */
    publishMessageToFarcaster(requestParameters: SignerApiPublishMessageToFarcasterRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<object, any>>;
    /**
     * Registers an app FID, deadline and a signature. Returns the signer status with an approval url.
     * @summary Register Signed Key
     * @param {SignerApiRegisterSignedKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<Signer>} A promise that resolves to a `Signer` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key)
     *
     */
    registerSignedKey(requestParameters: SignerApiRegisterSignedKeyRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Signer, any>>;
    /**
     * Registers an signed key and returns the developer managed signer status with an approval url.
     * @summary Register Signed Key
     * @param {SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SignerApi
     * @returns {Promise<DeveloperManagedSigner>} A promise that resolves to a `DeveloperManagedSigner` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/register-signed-key-for-developer-managed-signer)
     *
     */
    registerSignedKeyForDeveloperManagedSigner(requestParameters: SignerApiRegisterSignedKeyForDeveloperManagedSignerRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeveloperManagedSigner, any>>;
}
