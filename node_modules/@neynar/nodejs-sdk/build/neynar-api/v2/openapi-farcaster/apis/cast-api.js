"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LookupCastConversationFoldEnum = exports.FetchBulkCastsSortTypeEnum = exports.CastApi = exports.CastApiFactory = exports.CastApiFp = exports.CastApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * CastApi - axios parameter creator
 * @export
 */
const CastApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Delete an existing cast. \\ (In order to delete a cast `signer_uuid` must be approved)
         * @summary Delete a cast
         * @param {DeleteCastReqBody} delete_cast_req_body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-cast)
         *
         */
        deleteCast: async (delete_cast_req_body, options = {}) => {
            // verify required parameter 'delete_cast_req_body' is not null or undefined
            (0, common_1.assertParamExists)('deleteCast', 'delete_cast_req_body', delete_cast_req_body);
            const localVarPath = `/farcaster/cast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(delete_cast_req_body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch multiple casts using their respective hashes.
         * @summary Bulk fetch casts
         * @param {string} casts Hashes of the cast to be retrived (Comma separated, no spaces)
         * @param {number} [viewer_fid] adds viewer_context to cast object to show whether viewer has liked or recasted the cast.
         * @param {FetchBulkCastsSortTypeEnum} [sort_type] Optional parameter to sort the casts based on different criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastsResponse>} A promise that resolves to a `CastsResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-casts)
         *
         */
        fetchBulkCasts: async (casts, viewer_fid, sort_type, options = {}) => {
            // verify required parameter 'casts' is not null or undefined
            (0, common_1.assertParamExists)('fetchBulkCasts', 'casts', casts);
            const localVarPath = `/farcaster/casts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (casts !== undefined) {
                localVarQueryParameter['casts'] = casts;
            }
            if (viewer_fid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewer_fid;
            }
            if (sort_type !== undefined) {
                localVarQueryParameter['sort_type'] = sort_type;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches all composer actions on Warpcast. You can filter by top or featured.
         * @summary Fetch composer actions
         * @param {CastComposerType} list Type of list to fetch.
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 25)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastComposerActionsListResponse>} A promise that resolves to a `CastComposerActionsListResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-composer-actions)
         *
         */
        fetchComposerActions: async (list, limit, cursor, options = {}) => {
            // verify required parameter 'list' is not null or undefined
            (0, common_1.assertParamExists)('fetchComposerActions', 'list', list);
            const localVarPath = `/farcaster/cast/composer_actions/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (list !== undefined) {
                localVarQueryParameter['list'] = list;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets information about an individual cast by passing in a Warpcast web URL or cast hash
         * @summary By hash or URL
         * @param {string} identifier Cast identifier (Its either a url or a hash)
         * @param {CastParamType} type
         * @param {number} [viewer_fid] adds viewer_context to cast object to show whether viewer has liked or recasted the cast.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastResponse>} A promise that resolves to a `CastResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-by-hash-or-warpcast-url)
         *
         */
        lookupCastByHashOrWarpcastUrl: async (identifier, type, viewer_fid, options = {}) => {
            // verify required parameter 'identifier' is not null or undefined
            (0, common_1.assertParamExists)('lookupCastByHashOrWarpcastUrl', 'identifier', identifier);
            // verify required parameter 'type' is not null or undefined
            (0, common_1.assertParamExists)('lookupCastByHashOrWarpcastUrl', 'type', type);
            const localVarPath = `/farcaster/cast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (identifier !== undefined) {
                localVarQueryParameter['identifier'] = identifier;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (viewer_fid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewer_fid;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets all casts related to a conversation surrounding a cast by passing in a cast hash or Warpcast URL. Includes all the ancestors of a cast up to the root parent in a chronological order. Includes all direct_replies to the cast up to the reply_depth specified in the query parameter.
         * @summary Conversation for a cast
         * @param {string} identifier Cast identifier (Its either a url or a hash)
         * @param {CastParamType} type
         * @param {number} [reply_depth] The depth of replies in the conversation that will be returned (default 2)
         * @param {boolean} [include_chronological_parent_casts] Include all parent casts in chronological order
         * @param {number} [viewer_fid] Providing this will return a conversation that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
         * @param {CastConversationSortType} [sort_type] Sort type for the ordering of descendants. Default is &#x60;chron&#x60;
         * @param {LookupCastConversationFoldEnum} [fold] Show conversation above or below the fold. Lower quality responses are hidden below the fold. Not passing in a value shows the full conversation without any folding.
         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 50)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Conversation>} A promise that resolves to a `Conversation` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-conversation)
         *
         */
        lookupCastConversation: async (identifier, type, reply_depth, include_chronological_parent_casts, viewer_fid, sort_type, fold, limit, cursor, options = {}) => {
            // verify required parameter 'identifier' is not null or undefined
            (0, common_1.assertParamExists)('lookupCastConversation', 'identifier', identifier);
            // verify required parameter 'type' is not null or undefined
            (0, common_1.assertParamExists)('lookupCastConversation', 'type', type);
            const localVarPath = `/farcaster/cast/conversation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (identifier !== undefined) {
                localVarQueryParameter['identifier'] = identifier;
            }
            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }
            if (reply_depth !== undefined) {
                localVarQueryParameter['reply_depth'] = reply_depth;
            }
            if (include_chronological_parent_casts !== undefined) {
                localVarQueryParameter['include_chronological_parent_casts'] = include_chronological_parent_casts;
            }
            if (viewer_fid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewer_fid;
            }
            if (sort_type !== undefined) {
                localVarQueryParameter['sort_type'] = sort_type;
            }
            if (fold !== undefined) {
                localVarQueryParameter['fold'] = fold;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Posts a cast or cast reply. Works with mentions and embeds.   (In order to post a cast `signer_uuid` must be approved)
         * @summary Post a cast
         * @param {PostCastReqBody} post_cast_req_body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<PostCastResponse>} A promise that resolves to a `PostCastResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-cast)
         *
         */
        publishCast: async (post_cast_req_body, options = {}) => {
            // verify required parameter 'post_cast_req_body' is not null or undefined
            (0, common_1.assertParamExists)('publishCast', 'post_cast_req_body', post_cast_req_body);
            const localVarPath = `/farcaster/cast`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(post_cast_req_body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for casts based on a query string, with optional AND filters
         * @summary Search for casts
         * @param {string} q Query string to search for casts
         * @param {number} [author_fid] Fid of the user whose casts you want to search
         * @param {number} [viewer_fid] Providing this will return search results that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
         * @param {string} [parent_url] Parent URL of the casts you want to search
         * @param {string} [channel_id] Channel ID of the casts you want to search
         * @param {boolean} [priority_mode] When true, only returns search results from power badge users and users that the viewer follows (if viewer_fid is provided).
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {string} [cursor] Pagination cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastsSearchResponse>} A promise that resolves to a `CastsSearchResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-casts)
         *
         */
        searchCasts: async (q, author_fid, viewer_fid, parent_url, channel_id, priority_mode, limit, cursor, options = {}) => {
            // verify required parameter 'q' is not null or undefined
            (0, common_1.assertParamExists)('searchCasts', 'q', q);
            const localVarPath = `/farcaster/cast/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (author_fid !== undefined) {
                localVarQueryParameter['author_fid'] = author_fid;
            }
            if (viewer_fid !== undefined) {
                localVarQueryParameter['viewer_fid'] = viewer_fid;
            }
            if (parent_url !== undefined) {
                localVarQueryParameter['parent_url'] = parent_url;
            }
            if (channel_id !== undefined) {
                localVarQueryParameter['channel_id'] = channel_id;
            }
            if (priority_mode !== undefined) {
                localVarQueryParameter['priority_mode'] = priority_mode;
            }
            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }
            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.CastApiAxiosParamCreator = CastApiAxiosParamCreator;
/**
 * CastApi - functional programming interface
 * @export
 */
const CastApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.CastApiAxiosParamCreator)(configuration);
    return {
        /**
         * Delete an existing cast. \\ (In order to delete a cast `signer_uuid` must be approved)
         * @summary Delete a cast
         * @param {DeleteCastReqBody} delete_cast_req_body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-cast)
         *
         */
        async deleteCast(delete_cast_req_body, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCast(delete_cast_req_body, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CastApi.deleteCast']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetch multiple casts using their respective hashes.
         * @summary Bulk fetch casts
         * @param {string} casts Hashes of the cast to be retrived (Comma separated, no spaces)
         * @param {number} [viewer_fid] adds viewer_context to cast object to show whether viewer has liked or recasted the cast.
         * @param {FetchBulkCastsSortTypeEnum} [sort_type] Optional parameter to sort the casts based on different criteria
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastsResponse>} A promise that resolves to a `CastsResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-casts)
         *
         */
        async fetchBulkCasts(casts, viewer_fid, sort_type, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchBulkCasts(casts, viewer_fid, sort_type, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CastApi.fetchBulkCasts']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Fetches all composer actions on Warpcast. You can filter by top or featured.
         * @summary Fetch composer actions
         * @param {CastComposerType} list Type of list to fetch.
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 25)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastComposerActionsListResponse>} A promise that resolves to a `CastComposerActionsListResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-composer-actions)
         *
         */
        async fetchComposerActions(list, limit, cursor, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchComposerActions(list, limit, cursor, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CastApi.fetchComposerActions']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets information about an individual cast by passing in a Warpcast web URL or cast hash
         * @summary By hash or URL
         * @param {string} identifier Cast identifier (Its either a url or a hash)
         * @param {CastParamType} type
         * @param {number} [viewer_fid] adds viewer_context to cast object to show whether viewer has liked or recasted the cast.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastResponse>} A promise that resolves to a `CastResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-by-hash-or-warpcast-url)
         *
         */
        async lookupCastByHashOrWarpcastUrl(identifier, type, viewer_fid, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupCastByHashOrWarpcastUrl(identifier, type, viewer_fid, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CastApi.lookupCastByHashOrWarpcastUrl']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Gets all casts related to a conversation surrounding a cast by passing in a cast hash or Warpcast URL. Includes all the ancestors of a cast up to the root parent in a chronological order. Includes all direct_replies to the cast up to the reply_depth specified in the query parameter.
         * @summary Conversation for a cast
         * @param {string} identifier Cast identifier (Its either a url or a hash)
         * @param {CastParamType} type
         * @param {number} [reply_depth] The depth of replies in the conversation that will be returned (default 2)
         * @param {boolean} [include_chronological_parent_casts] Include all parent casts in chronological order
         * @param {number} [viewer_fid] Providing this will return a conversation that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
         * @param {CastConversationSortType} [sort_type] Sort type for the ordering of descendants. Default is &#x60;chron&#x60;
         * @param {LookupCastConversationFoldEnum} [fold] Show conversation above or below the fold. Lower quality responses are hidden below the fold. Not passing in a value shows the full conversation without any folding.
         * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 50)
         * @param {string} [cursor] Pagination cursor.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Conversation>} A promise that resolves to a `Conversation` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-conversation)
         *
         */
        async lookupCastConversation(identifier, type, reply_depth, include_chronological_parent_casts, viewer_fid, sort_type, fold, limit, cursor, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.lookupCastConversation(identifier, type, reply_depth, include_chronological_parent_casts, viewer_fid, sort_type, fold, limit, cursor, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CastApi.lookupCastConversation']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Posts a cast or cast reply. Works with mentions and embeds.   (In order to post a cast `signer_uuid` must be approved)
         * @summary Post a cast
         * @param {PostCastReqBody} post_cast_req_body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<PostCastResponse>} A promise that resolves to a `PostCastResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-cast)
         *
         */
        async publishCast(post_cast_req_body, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishCast(post_cast_req_body, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CastApi.publishCast']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Search for casts based on a query string, with optional AND filters
         * @summary Search for casts
         * @param {string} q Query string to search for casts
         * @param {number} [author_fid] Fid of the user whose casts you want to search
         * @param {number} [viewer_fid] Providing this will return search results that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
         * @param {string} [parent_url] Parent URL of the casts you want to search
         * @param {string} [channel_id] Channel ID of the casts you want to search
         * @param {boolean} [priority_mode] When true, only returns search results from power badge users and users that the viewer follows (if viewer_fid is provided).
         * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
         * @param {string} [cursor] Pagination cursor
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastsSearchResponse>} A promise that resolves to a `CastsSearchResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-casts)
         *
         */
        async searchCasts(q, author_fid, viewer_fid, parent_url, channel_id, priority_mode, limit, cursor, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCasts(q, author_fid, viewer_fid, parent_url, channel_id, priority_mode, limit, cursor, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['CastApi.searchCasts']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.CastApiFp = CastApiFp;
/**
 * CastApi - factory interface
 * @export
 */
const CastApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.CastApiFp)(configuration);
    return {
        /**
         * Delete an existing cast. \\ (In order to delete a cast `signer_uuid` must be approved)
         * @summary Delete a cast
         * @param {CastApiDeleteCastRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-cast)
         *
         */
        deleteCast(requestParameters, options) {
            return localVarFp.deleteCast(requestParameters.delete_cast_req_body, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch multiple casts using their respective hashes.
         * @summary Bulk fetch casts
         * @param {CastApiFetchBulkCastsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastsResponse>} A promise that resolves to a `CastsResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-casts)
         *
         */
        fetchBulkCasts(requestParameters, options) {
            return localVarFp.fetchBulkCasts(requestParameters.casts, requestParameters.viewer_fid, requestParameters.sort_type, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches all composer actions on Warpcast. You can filter by top or featured.
         * @summary Fetch composer actions
         * @param {CastApiFetchComposerActionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastComposerActionsListResponse>} A promise that resolves to a `CastComposerActionsListResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-composer-actions)
         *
         */
        fetchComposerActions(requestParameters, options) {
            return localVarFp.fetchComposerActions(requestParameters.list, requestParameters.limit, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets information about an individual cast by passing in a Warpcast web URL or cast hash
         * @summary By hash or URL
         * @param {CastApiLookupCastByHashOrWarpcastUrlRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastResponse>} A promise that resolves to a `CastResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-by-hash-or-warpcast-url)
         *
         */
        lookupCastByHashOrWarpcastUrl(requestParameters, options) {
            return localVarFp.lookupCastByHashOrWarpcastUrl(requestParameters.identifier, requestParameters.type, requestParameters.viewer_fid, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets all casts related to a conversation surrounding a cast by passing in a cast hash or Warpcast URL. Includes all the ancestors of a cast up to the root parent in a chronological order. Includes all direct_replies to the cast up to the reply_depth specified in the query parameter.
         * @summary Conversation for a cast
         * @param {CastApiLookupCastConversationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<Conversation>} A promise that resolves to a `Conversation` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-conversation)
         *
         */
        lookupCastConversation(requestParameters, options) {
            return localVarFp.lookupCastConversation(requestParameters.identifier, requestParameters.type, requestParameters.reply_depth, requestParameters.include_chronological_parent_casts, requestParameters.viewer_fid, requestParameters.sort_type, requestParameters.fold, requestParameters.limit, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * Posts a cast or cast reply. Works with mentions and embeds.   (In order to post a cast `signer_uuid` must be approved)
         * @summary Post a cast
         * @param {CastApiPublishCastRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<PostCastResponse>} A promise that resolves to a `PostCastResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-cast)
         *
         */
        publishCast(requestParameters, options) {
            return localVarFp.publishCast(requestParameters.post_cast_req_body, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for casts based on a query string, with optional AND filters
         * @summary Search for casts
         * @param {CastApiSearchCastsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<CastsSearchResponse>} A promise that resolves to a `CastsSearchResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-casts)
         *
         */
        searchCasts(requestParameters, options) {
            return localVarFp.searchCasts(requestParameters.q, requestParameters.author_fid, requestParameters.viewer_fid, requestParameters.parent_url, requestParameters.channel_id, requestParameters.priority_mode, requestParameters.limit, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
    };
};
exports.CastApiFactory = CastApiFactory;
/**
 * CastApi - object-oriented interface
 * @export
 * @class CastApi
 * @extends {BaseAPI}
 */
class CastApi extends base_1.BaseAPI {
    /**
     * Delete an existing cast. \\ (In order to delete a cast `signer_uuid` must be approved)
     * @summary Delete a cast
     * @param {CastApiDeleteCastRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/delete-cast)
     *
     */
    deleteCast(requestParameters, options) {
        return (0, exports.CastApiFp)(this.configuration).deleteCast(requestParameters.delete_cast_req_body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch multiple casts using their respective hashes.
     * @summary Bulk fetch casts
     * @param {CastApiFetchBulkCastsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     * @returns {Promise<CastsResponse>} A promise that resolves to a `CastsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-casts)
     *
     */
    fetchBulkCasts(requestParameters, options) {
        return (0, exports.CastApiFp)(this.configuration).fetchBulkCasts(requestParameters.casts, requestParameters.viewer_fid, requestParameters.sort_type, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetches all composer actions on Warpcast. You can filter by top or featured.
     * @summary Fetch composer actions
     * @param {CastApiFetchComposerActionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     * @returns {Promise<CastComposerActionsListResponse>} A promise that resolves to a `CastComposerActionsListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-composer-actions)
     *
     */
    fetchComposerActions(requestParameters, options) {
        return (0, exports.CastApiFp)(this.configuration).fetchComposerActions(requestParameters.list, requestParameters.limit, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets information about an individual cast by passing in a Warpcast web URL or cast hash
     * @summary By hash or URL
     * @param {CastApiLookupCastByHashOrWarpcastUrlRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     * @returns {Promise<CastResponse>} A promise that resolves to a `CastResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-by-hash-or-warpcast-url)
     *
     */
    lookupCastByHashOrWarpcastUrl(requestParameters, options) {
        return (0, exports.CastApiFp)(this.configuration).lookupCastByHashOrWarpcastUrl(requestParameters.identifier, requestParameters.type, requestParameters.viewer_fid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Gets all casts related to a conversation surrounding a cast by passing in a cast hash or Warpcast URL. Includes all the ancestors of a cast up to the root parent in a chronological order. Includes all direct_replies to the cast up to the reply_depth specified in the query parameter.
     * @summary Conversation for a cast
     * @param {CastApiLookupCastConversationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     * @returns {Promise<Conversation>} A promise that resolves to a `Conversation` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-cast-conversation)
     *
     */
    lookupCastConversation(requestParameters, options) {
        return (0, exports.CastApiFp)(this.configuration).lookupCastConversation(requestParameters.identifier, requestParameters.type, requestParameters.reply_depth, requestParameters.include_chronological_parent_casts, requestParameters.viewer_fid, requestParameters.sort_type, requestParameters.fold, requestParameters.limit, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Posts a cast or cast reply. Works with mentions and embeds.   (In order to post a cast `signer_uuid` must be approved)
     * @summary Post a cast
     * @param {CastApiPublishCastRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     * @returns {Promise<PostCastResponse>} A promise that resolves to a `PostCastResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/publish-cast)
     *
     */
    publishCast(requestParameters, options) {
        return (0, exports.CastApiFp)(this.configuration).publishCast(requestParameters.post_cast_req_body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Search for casts based on a query string, with optional AND filters
     * @summary Search for casts
     * @param {CastApiSearchCastsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CastApi
     * @returns {Promise<CastsSearchResponse>} A promise that resolves to a `CastsSearchResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-casts)
     *
     */
    searchCasts(requestParameters, options) {
        return (0, exports.CastApiFp)(this.configuration).searchCasts(requestParameters.q, requestParameters.author_fid, requestParameters.viewer_fid, requestParameters.parent_url, requestParameters.channel_id, requestParameters.priority_mode, requestParameters.limit, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.CastApi = CastApi;
/**
 * @export
 */
exports.FetchBulkCastsSortTypeEnum = {
    Trending: 'trending',
    Likes: 'likes',
    Recasts: 'recasts',
    Replies: 'replies',
    Recent: 'recent'
};
/**
 * @export
 */
exports.LookupCastConversationFoldEnum = {
    Above: 'above',
    Below: 'below'
};
