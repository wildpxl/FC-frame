/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { ChannelFollowReqBody } from '../models';
import type { ChannelListResponse } from '../models';
import type { ChannelMemberInviteListResponse } from '../models';
import type { ChannelMemberListResponse } from '../models';
import type { ChannelResponse } from '../models';
import type { ChannelResponseBulk } from '../models';
import type { ChannelSearchResponse } from '../models';
import type { ChannelType } from '../models';
import type { InviteChannelMemberReqBody } from '../models';
import type { OperationResponse } from '../models';
import type { RelevantFollowersResponse } from '../models';
import type { RemoveChannelMemberReqBody } from '../models';
import type { RespondChannelInviteReqBody } from '../models';
import type { TrendingChannelResponse } from '../models';
import type { UsersActiveChannelsResponse } from '../models';
import type { UsersResponse } from '../models';
/**
 * ChannelApi - axios parameter creator
 * @export
 */
export declare const ChannelApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Returns a list of all channels with their details
     * @summary Fetch all channels with their details
     * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 200)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelListResponse>} A promise that resolves to a `ChannelListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-all-channels)
     *
     */
    fetchAllChannels: (limit?: number, cursor?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns details of multiple channels
     * @summary Bulk fetch
     * @param {string} ids Comma separated list of channel IDs or parent_urls, up to 100 at a time
     * @param {ChannelType} [type] Type of identifier being used to query the channels. Defaults to ID.
     * @param {number} [viewer_fid] FID of the user viewing the channels.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelResponseBulk>} A promise that resolves to a `ChannelResponseBulk` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-channels)
     *
     */
    fetchBulkChannels: (ids: string, type?: ChannelType, viewer_fid?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch a list of invites, either in a channel or for a user. If both are provided, open channel invite for that user is returned.
     * @summary Open invites
     * @param {string} [channel_id] Channel ID for the channel being queried
     * @param {number} [invited_fid] FID of the user being invited
     * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelMemberInviteListResponse>} A promise that resolves to a `ChannelMemberInviteListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-invites)
     *
     */
    fetchChannelInvites: (channel_id?: string, invited_fid?: number, limit?: number, cursor?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch a list of members in a channel
     * @summary Fetch members
     * @param {string} channel_id Channel ID for the channel being queried
     * @param {number} [fid] FID of the user being queried. Specify this to check if a user is a member of the channel without paginating through all members.
     * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {boolean} [x_neynar_experimental] Enables experimental features
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelMemberListResponse>} A promise that resolves to a `ChannelMemberListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-members)
     *
     */
    fetchChannelMembers: (channel_id: string, fid?: number, limit?: number, cursor?: string, x_neynar_experimental?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of followers for a specific channel. Max limit is 1000. Use cursor for pagination.
     * @summary For channel
     * @param {string} id Channel ID for the channel being queried
     * @param {number} [viewer_fid] Providing this will return a list of followers that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [limit] Number of followers to fetch  (Default: 25, Maximum: 1000)
     * @param {boolean} [x_neynar_experimental] Enables experimental features
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-followers-for-a-channel)
     *
     */
    fetchFollowersForAChannel: (id: string, viewer_fid?: number, cursor?: string, limit?: number, x_neynar_experimental?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of relevant channel followers for a specific FID. This usually shows on a channel as \"X, Y, Z follow this channel\".
     * @summary Relevant followers
     * @param {string} id Channel ID being queried
     * @param {number} viewer_fid The FID of the user to customize this response for. Providing this will also return a list of followers that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {boolean} [x_neynar_experimental] Enables experimental features
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers-for-a-channel)
     *
     */
    fetchRelevantFollowersForAChannel: (id: string, viewer_fid: number, x_neynar_experimental?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of trending channels based on activity
     * @summary Channels by activity
     * @param {FetchTrendingChannelsTimeWindowEnum} [time_window]
     * @param {number} [limit] Number of results to fetch  (Default: 10, Maximum: 25)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<TrendingChannelResponse>} A promise that resolves to a `TrendingChannelResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-channels)
     *
     */
    fetchTrendingChannels: (time_window?: FetchTrendingChannelsTimeWindowEnum, limit?: number, cursor?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of all channels with their details that an FID is a member of. Data may have a delay of up to 1 hour.
     * @summary Member of
     * @param {number} fid The FID of the user.
     * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelMemberListResponse>} A promise that resolves to a `ChannelMemberListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-channel-memberships)
     *
     */
    fetchUserChannelMemberships: (fid: number, limit?: number, cursor?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of all channels with their details that a FID follows.
     * @summary Following
     * @param {number} fid The FID of the user.
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelListResponse>} A promise that resolves to a `ChannelListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-channels)
     *
     */
    fetchUserChannels: (fid: number, limit?: number, cursor?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches all channels that a user has casted in, in reverse chronological order.
     * @summary Fetch channels that user is active in
     * @param {number} fid The user\&#39;s FID (identifier)
     * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<UsersActiveChannelsResponse>} A promise that resolves to a `UsersActiveChannelsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-users-active-channels)
     *
     */
    fetchUsersActiveChannels: (fid: number, limit?: number, cursor?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Follow a channel
     * @summary Follow a channel
     * @param {ChannelFollowReqBody} channel_follow_req_body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/follow-channel)
     *
     */
    followChannel: (channel_follow_req_body: ChannelFollowReqBody, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Invite a user to a channel
     * @summary Invite
     * @param {InviteChannelMemberReqBody} invite_channel_member_req_body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/invite-channel-member)
     *
     */
    inviteChannelMember: (invite_channel_member_req_body: InviteChannelMemberReqBody, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns details of a channel
     * @summary By ID or parent_url
     * @param {string} id Channel ID for the channel being queried
     * @param {ChannelType} [type] Type of identifier being used to query the channel. Defaults to ID.
     * @param {number} [viewer_fid] FID of the user viewing the channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelResponse>} A promise that resolves to a `ChannelResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-channel)
     *
     */
    lookupChannel: (id: string, type?: ChannelType, viewer_fid?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Remove a user from a channel or a user\'s invite to a channel role
     * @summary Remove user
     * @param {RemoveChannelMemberReqBody} remove_channel_member_req_body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/remove-channel-member)
     *
     */
    removeChannelMember: (remove_channel_member_req_body: RemoveChannelMemberReqBody, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Accept or reject a channel invite
     * @summary Accept or reject an invite
     * @param {RespondChannelInviteReqBody} respond_channel_invite_req_body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/respond-channel-invite)
     *
     */
    respondChannelInvite: (respond_channel_invite_req_body: RespondChannelInviteReqBody, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Returns a list of channels based on ID or name
     * @summary Search by ID or name
     * @param {string} q Channel ID or name for the channel being queried
     * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 200)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelSearchResponse>} A promise that resolves to a `ChannelSearchResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-channels)
     *
     */
    searchChannels: (q: string, limit?: number, cursor?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Unfollow a channel
     * @summary Unfollow a channel
     * @param {ChannelFollowReqBody} channel_follow_req_body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/unfollow-channel)
     *
     */
    unfollowChannel: (channel_follow_req_body: ChannelFollowReqBody, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ChannelApi - functional programming interface
 * @export
 */
export declare const ChannelApiFp: (configuration?: Configuration) => {
    /**
     * Returns a list of all channels with their details
     * @summary Fetch all channels with their details
     * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 200)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelListResponse>} A promise that resolves to a `ChannelListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-all-channels)
     *
     */
    fetchAllChannels(limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelListResponse>>;
    /**
     * Returns details of multiple channels
     * @summary Bulk fetch
     * @param {string} ids Comma separated list of channel IDs or parent_urls, up to 100 at a time
     * @param {ChannelType} [type] Type of identifier being used to query the channels. Defaults to ID.
     * @param {number} [viewer_fid] FID of the user viewing the channels.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelResponseBulk>} A promise that resolves to a `ChannelResponseBulk` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-channels)
     *
     */
    fetchBulkChannels(ids: string, type?: ChannelType, viewer_fid?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelResponseBulk>>;
    /**
     * Fetch a list of invites, either in a channel or for a user. If both are provided, open channel invite for that user is returned.
     * @summary Open invites
     * @param {string} [channel_id] Channel ID for the channel being queried
     * @param {number} [invited_fid] FID of the user being invited
     * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelMemberInviteListResponse>} A promise that resolves to a `ChannelMemberInviteListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-invites)
     *
     */
    fetchChannelInvites(channel_id?: string, invited_fid?: number, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelMemberInviteListResponse>>;
    /**
     * Fetch a list of members in a channel
     * @summary Fetch members
     * @param {string} channel_id Channel ID for the channel being queried
     * @param {number} [fid] FID of the user being queried. Specify this to check if a user is a member of the channel without paginating through all members.
     * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {boolean} [x_neynar_experimental] Enables experimental features
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelMemberListResponse>} A promise that resolves to a `ChannelMemberListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-members)
     *
     */
    fetchChannelMembers(channel_id: string, fid?: number, limit?: number, cursor?: string, x_neynar_experimental?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelMemberListResponse>>;
    /**
     * Returns a list of followers for a specific channel. Max limit is 1000. Use cursor for pagination.
     * @summary For channel
     * @param {string} id Channel ID for the channel being queried
     * @param {number} [viewer_fid] Providing this will return a list of followers that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [limit] Number of followers to fetch  (Default: 25, Maximum: 1000)
     * @param {boolean} [x_neynar_experimental] Enables experimental features
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-followers-for-a-channel)
     *
     */
    fetchFollowersForAChannel(id: string, viewer_fid?: number, cursor?: string, limit?: number, x_neynar_experimental?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersResponse>>;
    /**
     * Returns a list of relevant channel followers for a specific FID. This usually shows on a channel as \"X, Y, Z follow this channel\".
     * @summary Relevant followers
     * @param {string} id Channel ID being queried
     * @param {number} viewer_fid The FID of the user to customize this response for. Providing this will also return a list of followers that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {boolean} [x_neynar_experimental] Enables experimental features
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers-for-a-channel)
     *
     */
    fetchRelevantFollowersForAChannel(id: string, viewer_fid: number, x_neynar_experimental?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RelevantFollowersResponse>>;
    /**
     * Returns a list of trending channels based on activity
     * @summary Channels by activity
     * @param {FetchTrendingChannelsTimeWindowEnum} [time_window]
     * @param {number} [limit] Number of results to fetch  (Default: 10, Maximum: 25)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<TrendingChannelResponse>} A promise that resolves to a `TrendingChannelResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-channels)
     *
     */
    fetchTrendingChannels(time_window?: FetchTrendingChannelsTimeWindowEnum, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrendingChannelResponse>>;
    /**
     * Returns a list of all channels with their details that an FID is a member of. Data may have a delay of up to 1 hour.
     * @summary Member of
     * @param {number} fid The FID of the user.
     * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelMemberListResponse>} A promise that resolves to a `ChannelMemberListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-channel-memberships)
     *
     */
    fetchUserChannelMemberships(fid: number, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelMemberListResponse>>;
    /**
     * Returns a list of all channels with their details that a FID follows.
     * @summary Following
     * @param {number} fid The FID of the user.
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelListResponse>} A promise that resolves to a `ChannelListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-channels)
     *
     */
    fetchUserChannels(fid: number, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelListResponse>>;
    /**
     * Fetches all channels that a user has casted in, in reverse chronological order.
     * @summary Fetch channels that user is active in
     * @param {number} fid The user\&#39;s FID (identifier)
     * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<UsersActiveChannelsResponse>} A promise that resolves to a `UsersActiveChannelsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-users-active-channels)
     *
     */
    fetchUsersActiveChannels(fid: number, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersActiveChannelsResponse>>;
    /**
     * Follow a channel
     * @summary Follow a channel
     * @param {ChannelFollowReqBody} channel_follow_req_body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/follow-channel)
     *
     */
    followChannel(channel_follow_req_body: ChannelFollowReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationResponse>>;
    /**
     * Invite a user to a channel
     * @summary Invite
     * @param {InviteChannelMemberReqBody} invite_channel_member_req_body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/invite-channel-member)
     *
     */
    inviteChannelMember(invite_channel_member_req_body: InviteChannelMemberReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationResponse>>;
    /**
     * Returns details of a channel
     * @summary By ID or parent_url
     * @param {string} id Channel ID for the channel being queried
     * @param {ChannelType} [type] Type of identifier being used to query the channel. Defaults to ID.
     * @param {number} [viewer_fid] FID of the user viewing the channel.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelResponse>} A promise that resolves to a `ChannelResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-channel)
     *
     */
    lookupChannel(id: string, type?: ChannelType, viewer_fid?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelResponse>>;
    /**
     * Remove a user from a channel or a user\'s invite to a channel role
     * @summary Remove user
     * @param {RemoveChannelMemberReqBody} remove_channel_member_req_body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/remove-channel-member)
     *
     */
    removeChannelMember(remove_channel_member_req_body: RemoveChannelMemberReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationResponse>>;
    /**
     * Accept or reject a channel invite
     * @summary Accept or reject an invite
     * @param {RespondChannelInviteReqBody} respond_channel_invite_req_body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/respond-channel-invite)
     *
     */
    respondChannelInvite(respond_channel_invite_req_body: RespondChannelInviteReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationResponse>>;
    /**
     * Returns a list of channels based on ID or name
     * @summary Search by ID or name
     * @param {string} q Channel ID or name for the channel being queried
     * @param {number} [limit] Number of results to fetch  (Default: 20, Maximum: 200)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelSearchResponse>} A promise that resolves to a `ChannelSearchResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-channels)
     *
     */
    searchChannels(q: string, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelSearchResponse>>;
    /**
     * Unfollow a channel
     * @summary Unfollow a channel
     * @param {ChannelFollowReqBody} channel_follow_req_body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/unfollow-channel)
     *
     */
    unfollowChannel(channel_follow_req_body: ChannelFollowReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperationResponse>>;
};
/**
 * ChannelApi - factory interface
 * @export
 */
export declare const ChannelApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Returns a list of all channels with their details
     * @summary Fetch all channels with their details
     * @param {ChannelApiFetchAllChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelListResponse>} A promise that resolves to a `ChannelListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-all-channels)
     *
     */
    fetchAllChannels(requestParameters?: ChannelApiFetchAllChannelsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChannelListResponse>;
    /**
     * Returns details of multiple channels
     * @summary Bulk fetch
     * @param {ChannelApiFetchBulkChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelResponseBulk>} A promise that resolves to a `ChannelResponseBulk` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-channels)
     *
     */
    fetchBulkChannels(requestParameters: ChannelApiFetchBulkChannelsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChannelResponseBulk>;
    /**
     * Fetch a list of invites, either in a channel or for a user. If both are provided, open channel invite for that user is returned.
     * @summary Open invites
     * @param {ChannelApiFetchChannelInvitesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelMemberInviteListResponse>} A promise that resolves to a `ChannelMemberInviteListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-invites)
     *
     */
    fetchChannelInvites(requestParameters?: ChannelApiFetchChannelInvitesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChannelMemberInviteListResponse>;
    /**
     * Fetch a list of members in a channel
     * @summary Fetch members
     * @param {ChannelApiFetchChannelMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelMemberListResponse>} A promise that resolves to a `ChannelMemberListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-members)
     *
     */
    fetchChannelMembers(requestParameters: ChannelApiFetchChannelMembersRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChannelMemberListResponse>;
    /**
     * Returns a list of followers for a specific channel. Max limit is 1000. Use cursor for pagination.
     * @summary For channel
     * @param {ChannelApiFetchFollowersForAChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-followers-for-a-channel)
     *
     */
    fetchFollowersForAChannel(requestParameters: ChannelApiFetchFollowersForAChannelRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersResponse>;
    /**
     * Returns a list of relevant channel followers for a specific FID. This usually shows on a channel as \"X, Y, Z follow this channel\".
     * @summary Relevant followers
     * @param {ChannelApiFetchRelevantFollowersForAChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers-for-a-channel)
     *
     */
    fetchRelevantFollowersForAChannel(requestParameters: ChannelApiFetchRelevantFollowersForAChannelRequest, options?: RawAxiosRequestConfig): AxiosPromise<RelevantFollowersResponse>;
    /**
     * Returns a list of trending channels based on activity
     * @summary Channels by activity
     * @param {ChannelApiFetchTrendingChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<TrendingChannelResponse>} A promise that resolves to a `TrendingChannelResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-channels)
     *
     */
    fetchTrendingChannels(requestParameters?: ChannelApiFetchTrendingChannelsRequest, options?: RawAxiosRequestConfig): AxiosPromise<TrendingChannelResponse>;
    /**
     * Returns a list of all channels with their details that an FID is a member of. Data may have a delay of up to 1 hour.
     * @summary Member of
     * @param {ChannelApiFetchUserChannelMembershipsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelMemberListResponse>} A promise that resolves to a `ChannelMemberListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-channel-memberships)
     *
     */
    fetchUserChannelMemberships(requestParameters: ChannelApiFetchUserChannelMembershipsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChannelMemberListResponse>;
    /**
     * Returns a list of all channels with their details that a FID follows.
     * @summary Following
     * @param {ChannelApiFetchUserChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelListResponse>} A promise that resolves to a `ChannelListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-channels)
     *
     */
    fetchUserChannels(requestParameters: ChannelApiFetchUserChannelsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChannelListResponse>;
    /**
     * Fetches all channels that a user has casted in, in reverse chronological order.
     * @summary Fetch channels that user is active in
     * @param {ChannelApiFetchUsersActiveChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<UsersActiveChannelsResponse>} A promise that resolves to a `UsersActiveChannelsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-users-active-channels)
     *
     */
    fetchUsersActiveChannels(requestParameters: ChannelApiFetchUsersActiveChannelsRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersActiveChannelsResponse>;
    /**
     * Follow a channel
     * @summary Follow a channel
     * @param {ChannelApiFollowChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/follow-channel)
     *
     */
    followChannel(requestParameters: ChannelApiFollowChannelRequest, options?: RawAxiosRequestConfig): AxiosPromise<OperationResponse>;
    /**
     * Invite a user to a channel
     * @summary Invite
     * @param {ChannelApiInviteChannelMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/invite-channel-member)
     *
     */
    inviteChannelMember(requestParameters: ChannelApiInviteChannelMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<OperationResponse>;
    /**
     * Returns details of a channel
     * @summary By ID or parent_url
     * @param {ChannelApiLookupChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelResponse>} A promise that resolves to a `ChannelResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-channel)
     *
     */
    lookupChannel(requestParameters: ChannelApiLookupChannelRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChannelResponse>;
    /**
     * Remove a user from a channel or a user\'s invite to a channel role
     * @summary Remove user
     * @param {ChannelApiRemoveChannelMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/remove-channel-member)
     *
     */
    removeChannelMember(requestParameters: ChannelApiRemoveChannelMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<OperationResponse>;
    /**
     * Accept or reject a channel invite
     * @summary Accept or reject an invite
     * @param {ChannelApiRespondChannelInviteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/respond-channel-invite)
     *
     */
    respondChannelInvite(requestParameters: ChannelApiRespondChannelInviteRequest, options?: RawAxiosRequestConfig): AxiosPromise<OperationResponse>;
    /**
     * Returns a list of channels based on ID or name
     * @summary Search by ID or name
     * @param {ChannelApiSearchChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<ChannelSearchResponse>} A promise that resolves to a `ChannelSearchResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-channels)
     *
     */
    searchChannels(requestParameters: ChannelApiSearchChannelsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChannelSearchResponse>;
    /**
     * Unfollow a channel
     * @summary Unfollow a channel
     * @param {ChannelApiUnfollowChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/unfollow-channel)
     *
     */
    unfollowChannel(requestParameters: ChannelApiUnfollowChannelRequest, options?: RawAxiosRequestConfig): AxiosPromise<OperationResponse>;
};
/**
 * ChannelApi - interface
 * @export
 * @interface ChannelApi
 */
export interface ChannelApiInterface {
    /**
     * Returns a list of all channels with their details
     * @summary Fetch all channels with their details
     * @param {ChannelApiFetchAllChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     * @returns {Promise<ChannelListResponse>} A promise that resolves to a `ChannelListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-all-channels)
     *
     */
    fetchAllChannels(requestParameters?: ChannelApiFetchAllChannelsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChannelListResponse>;
    /**
     * Returns details of multiple channels
     * @summary Bulk fetch
     * @param {ChannelApiFetchBulkChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     * @returns {Promise<ChannelResponseBulk>} A promise that resolves to a `ChannelResponseBulk` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-channels)
     *
     */
    fetchBulkChannels(requestParameters: ChannelApiFetchBulkChannelsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChannelResponseBulk>;
    /**
     * Fetch a list of invites, either in a channel or for a user. If both are provided, open channel invite for that user is returned.
     * @summary Open invites
     * @param {ChannelApiFetchChannelInvitesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     * @returns {Promise<ChannelMemberInviteListResponse>} A promise that resolves to a `ChannelMemberInviteListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-invites)
     *
     */
    fetchChannelInvites(requestParameters?: ChannelApiFetchChannelInvitesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChannelMemberInviteListResponse>;
    /**
     * Fetch a list of members in a channel
     * @summary Fetch members
     * @param {ChannelApiFetchChannelMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     * @returns {Promise<ChannelMemberListResponse>} A promise that resolves to a `ChannelMemberListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-members)
     *
     */
    fetchChannelMembers(requestParameters: ChannelApiFetchChannelMembersRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChannelMemberListResponse>;
    /**
     * Returns a list of followers for a specific channel. Max limit is 1000. Use cursor for pagination.
     * @summary For channel
     * @param {ChannelApiFetchFollowersForAChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-followers-for-a-channel)
     *
     */
    fetchFollowersForAChannel(requestParameters: ChannelApiFetchFollowersForAChannelRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersResponse>;
    /**
     * Returns a list of relevant channel followers for a specific FID. This usually shows on a channel as \"X, Y, Z follow this channel\".
     * @summary Relevant followers
     * @param {ChannelApiFetchRelevantFollowersForAChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers-for-a-channel)
     *
     */
    fetchRelevantFollowersForAChannel(requestParameters: ChannelApiFetchRelevantFollowersForAChannelRequest, options?: RawAxiosRequestConfig): AxiosPromise<RelevantFollowersResponse>;
    /**
     * Returns a list of trending channels based on activity
     * @summary Channels by activity
     * @param {ChannelApiFetchTrendingChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     * @returns {Promise<TrendingChannelResponse>} A promise that resolves to a `TrendingChannelResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-channels)
     *
     */
    fetchTrendingChannels(requestParameters?: ChannelApiFetchTrendingChannelsRequest, options?: RawAxiosRequestConfig): AxiosPromise<TrendingChannelResponse>;
    /**
     * Returns a list of all channels with their details that an FID is a member of. Data may have a delay of up to 1 hour.
     * @summary Member of
     * @param {ChannelApiFetchUserChannelMembershipsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     * @returns {Promise<ChannelMemberListResponse>} A promise that resolves to a `ChannelMemberListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-channel-memberships)
     *
     */
    fetchUserChannelMemberships(requestParameters: ChannelApiFetchUserChannelMembershipsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChannelMemberListResponse>;
    /**
     * Returns a list of all channels with their details that a FID follows.
     * @summary Following
     * @param {ChannelApiFetchUserChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     * @returns {Promise<ChannelListResponse>} A promise that resolves to a `ChannelListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-channels)
     *
     */
    fetchUserChannels(requestParameters: ChannelApiFetchUserChannelsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChannelListResponse>;
    /**
     * Fetches all channels that a user has casted in, in reverse chronological order.
     * @summary Fetch channels that user is active in
     * @param {ChannelApiFetchUsersActiveChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     * @returns {Promise<UsersActiveChannelsResponse>} A promise that resolves to a `UsersActiveChannelsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-users-active-channels)
     *
     */
    fetchUsersActiveChannels(requestParameters: ChannelApiFetchUsersActiveChannelsRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersActiveChannelsResponse>;
    /**
     * Follow a channel
     * @summary Follow a channel
     * @param {ChannelApiFollowChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/follow-channel)
     *
     */
    followChannel(requestParameters: ChannelApiFollowChannelRequest, options?: RawAxiosRequestConfig): AxiosPromise<OperationResponse>;
    /**
     * Invite a user to a channel
     * @summary Invite
     * @param {ChannelApiInviteChannelMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/invite-channel-member)
     *
     */
    inviteChannelMember(requestParameters: ChannelApiInviteChannelMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<OperationResponse>;
    /**
     * Returns details of a channel
     * @summary By ID or parent_url
     * @param {ChannelApiLookupChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     * @returns {Promise<ChannelResponse>} A promise that resolves to a `ChannelResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-channel)
     *
     */
    lookupChannel(requestParameters: ChannelApiLookupChannelRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChannelResponse>;
    /**
     * Remove a user from a channel or a user\'s invite to a channel role
     * @summary Remove user
     * @param {ChannelApiRemoveChannelMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/remove-channel-member)
     *
     */
    removeChannelMember(requestParameters: ChannelApiRemoveChannelMemberRequest, options?: RawAxiosRequestConfig): AxiosPromise<OperationResponse>;
    /**
     * Accept or reject a channel invite
     * @summary Accept or reject an invite
     * @param {ChannelApiRespondChannelInviteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/respond-channel-invite)
     *
     */
    respondChannelInvite(requestParameters: ChannelApiRespondChannelInviteRequest, options?: RawAxiosRequestConfig): AxiosPromise<OperationResponse>;
    /**
     * Returns a list of channels based on ID or name
     * @summary Search by ID or name
     * @param {ChannelApiSearchChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     * @returns {Promise<ChannelSearchResponse>} A promise that resolves to a `ChannelSearchResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-channels)
     *
     */
    searchChannels(requestParameters: ChannelApiSearchChannelsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ChannelSearchResponse>;
    /**
     * Unfollow a channel
     * @summary Unfollow a channel
     * @param {ChannelApiUnfollowChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApiInterface
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/unfollow-channel)
     *
     */
    unfollowChannel(requestParameters: ChannelApiUnfollowChannelRequest, options?: RawAxiosRequestConfig): AxiosPromise<OperationResponse>;
}
/**
 * Request parameters for fetchAllChannels operation in ChannelApi.
 * @export
 * @interface ChannelApiFetchAllChannelsRequest
 */
export interface ChannelApiFetchAllChannelsRequest {
    /**
     * Number of results to fetch (Default: 20, Maximum: 200)
     *
     *
     * @type {number}
     * @memberof ChannelApiFetchAllChannels
     */
    readonly limit?: number;
    /**
     * Pagination cursor.
     *
     *
     * @type {string}
     * @memberof ChannelApiFetchAllChannels
     */
    readonly cursor?: string;
}
/**
 * Request parameters for fetchBulkChannels operation in ChannelApi.
 * @export
 * @interface ChannelApiFetchBulkChannelsRequest
 */
export interface ChannelApiFetchBulkChannelsRequest {
    /**
     * Comma separated list of channel IDs or parent_urls, up to 100 at a time
     *
     * @commaSeparated
     * @type {string}
     * @memberof ChannelApiFetchBulkChannels
     */
    readonly ids: string;
    /**
     * Type of identifier being used to query the channels. Defaults to ID.
     *
     *
     * @type {ChannelType}
     * @memberof ChannelApiFetchBulkChannels
     */
    readonly type?: ChannelType;
    /**
     * FID of the user viewing the channels.
     *
     *
     * @type {number}
     * @memberof ChannelApiFetchBulkChannels
     */
    readonly viewer_fid?: number;
}
/**
 * Request parameters for fetchChannelInvites operation in ChannelApi.
 * @export
 * @interface ChannelApiFetchChannelInvitesRequest
 */
export interface ChannelApiFetchChannelInvitesRequest {
    /**
     * Channel ID for the channel being queried
     *
     *
     * @type {string}
     * @memberof ChannelApiFetchChannelInvites
     */
    readonly channel_id?: string;
    /**
     * FID of the user being invited
     *
     *
     * @type {number}
     * @memberof ChannelApiFetchChannelInvites
     */
    readonly invited_fid?: number;
    /**
     * Number of results to fetch (Default: 20, Maximum: 100)
     *
     *
     * @type {number}
     * @memberof ChannelApiFetchChannelInvites
     */
    readonly limit?: number;
    /**
     * Pagination cursor.
     *
     *
     * @type {string}
     * @memberof ChannelApiFetchChannelInvites
     */
    readonly cursor?: string;
}
/**
 * Request parameters for fetchChannelMembers operation in ChannelApi.
 * @export
 * @interface ChannelApiFetchChannelMembersRequest
 */
export interface ChannelApiFetchChannelMembersRequest {
    /**
     * Channel ID for the channel being queried
     *
     *
     * @type {string}
     * @memberof ChannelApiFetchChannelMembers
     */
    readonly channel_id: string;
    /**
     * FID of the user being queried. Specify this to check if a user is a member of the channel without paginating through all members.
     *
     *
     * @type {number}
     * @memberof ChannelApiFetchChannelMembers
     */
    readonly fid?: number;
    /**
     * Number of results to fetch (Default: 20, Maximum: 100)
     *
     *
     * @type {number}
     * @memberof ChannelApiFetchChannelMembers
     */
    readonly limit?: number;
    /**
     * Pagination cursor.
     *
     *
     * @type {string}
     * @memberof ChannelApiFetchChannelMembers
     */
    readonly cursor?: string;
    /**
     * Enables experimental features
     *
     *
     * @type {boolean}
     * @memberof ChannelApiFetchChannelMembers
     */
    readonly x_neynar_experimental?: boolean;
}
/**
 * Request parameters for fetchFollowersForAChannel operation in ChannelApi.
 * @export
 * @interface ChannelApiFetchFollowersForAChannelRequest
 */
export interface ChannelApiFetchFollowersForAChannelRequest {
    /**
     * Channel ID for the channel being queried
     *
     *
     * @type {string}
     * @memberof ChannelApiFetchFollowersForAChannel
     */
    readonly id: string;
    /**
     * Providing this will return a list of followers that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     *
     *
     * @type {number}
     * @memberof ChannelApiFetchFollowersForAChannel
     */
    readonly viewer_fid?: number;
    /**
     * Pagination cursor.
     *
     *
     * @type {string}
     * @memberof ChannelApiFetchFollowersForAChannel
     */
    readonly cursor?: string;
    /**
     * Number of followers to fetch (Default: 25, Maximum: 1000)
     *
     *
     * @type {number}
     * @memberof ChannelApiFetchFollowersForAChannel
     */
    readonly limit?: number;
    /**
     * Enables experimental features
     *
     *
     * @type {boolean}
     * @memberof ChannelApiFetchFollowersForAChannel
     */
    readonly x_neynar_experimental?: boolean;
}
/**
 * Request parameters for fetchRelevantFollowersForAChannel operation in ChannelApi.
 * @export
 * @interface ChannelApiFetchRelevantFollowersForAChannelRequest
 */
export interface ChannelApiFetchRelevantFollowersForAChannelRequest {
    /**
     * Channel ID being queried
     *
     *
     * @type {string}
     * @memberof ChannelApiFetchRelevantFollowersForAChannel
     */
    readonly id: string;
    /**
     * The FID of the user to customize this response for. Providing this will also return a list of followers that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     *
     *
     * @type {number}
     * @memberof ChannelApiFetchRelevantFollowersForAChannel
     */
    readonly viewer_fid: number;
    /**
     * Enables experimental features
     *
     *
     * @type {boolean}
     * @memberof ChannelApiFetchRelevantFollowersForAChannel
     */
    readonly x_neynar_experimental?: boolean;
}
/**
 * Request parameters for fetchTrendingChannels operation in ChannelApi.
 * @export
 * @interface ChannelApiFetchTrendingChannelsRequest
 */
export interface ChannelApiFetchTrendingChannelsRequest {
    /**
     *
     *
     *
     * @type {'1d' | '7d' | '30d'}
     * @memberof ChannelApiFetchTrendingChannels
     */
    readonly time_window?: FetchTrendingChannelsTimeWindowEnum;
    /**
     * Number of results to fetch (Default: 10, Maximum: 25)
     *
     *
     * @type {number}
     * @memberof ChannelApiFetchTrendingChannels
     */
    readonly limit?: number;
    /**
     * Pagination cursor.
     *
     *
     * @type {string}
     * @memberof ChannelApiFetchTrendingChannels
     */
    readonly cursor?: string;
}
/**
 * Request parameters for fetchUserChannelMemberships operation in ChannelApi.
 * @export
 * @interface ChannelApiFetchUserChannelMembershipsRequest
 */
export interface ChannelApiFetchUserChannelMembershipsRequest {
    /**
     * The FID of the user.
     *
     *
     * @type {number}
     * @memberof ChannelApiFetchUserChannelMemberships
     */
    readonly fid: number;
    /**
     * Number of results to fetch (Default: 20, Maximum: 100)
     *
     *
     * @type {number}
     * @memberof ChannelApiFetchUserChannelMemberships
     */
    readonly limit?: number;
    /**
     * Pagination cursor.
     *
     *
     * @type {string}
     * @memberof ChannelApiFetchUserChannelMemberships
     */
    readonly cursor?: string;
}
/**
 * Request parameters for fetchUserChannels operation in ChannelApi.
 * @export
 * @interface ChannelApiFetchUserChannelsRequest
 */
export interface ChannelApiFetchUserChannelsRequest {
    /**
     * The FID of the user.
     *
     *
     * @type {number}
     * @memberof ChannelApiFetchUserChannels
     */
    readonly fid: number;
    /**
     * Number of results to fetch (Default: 25, Maximum: 100)
     *
     *
     * @type {number}
     * @memberof ChannelApiFetchUserChannels
     */
    readonly limit?: number;
    /**
     * Pagination cursor.
     *
     *
     * @type {string}
     * @memberof ChannelApiFetchUserChannels
     */
    readonly cursor?: string;
}
/**
 * Request parameters for fetchUsersActiveChannels operation in ChannelApi.
 * @export
 * @interface ChannelApiFetchUsersActiveChannelsRequest
 */
export interface ChannelApiFetchUsersActiveChannelsRequest {
    /**
     * The user\&#39;s FID (identifier)
     *
     *
     * @type {number}
     * @memberof ChannelApiFetchUsersActiveChannels
     */
    readonly fid: number;
    /**
     * Number of results to fetch (Default: 20, Maximum: 100)
     *
     *
     * @type {number}
     * @memberof ChannelApiFetchUsersActiveChannels
     */
    readonly limit?: number;
    /**
     * Pagination cursor.
     *
     *
     * @type {string}
     * @memberof ChannelApiFetchUsersActiveChannels
     */
    readonly cursor?: string;
}
/**
 * Request parameters for followChannel operation in ChannelApi.
 * @export
 * @interface ChannelApiFollowChannelRequest
 */
export interface ChannelApiFollowChannelRequest {
    /**
     *
     *
     *
     * @type {ChannelFollowReqBody}
     * @memberof ChannelApiFollowChannel
     */
    readonly channel_follow_req_body: ChannelFollowReqBody;
}
/**
 * Request parameters for inviteChannelMember operation in ChannelApi.
 * @export
 * @interface ChannelApiInviteChannelMemberRequest
 */
export interface ChannelApiInviteChannelMemberRequest {
    /**
     *
     *
     *
     * @type {InviteChannelMemberReqBody}
     * @memberof ChannelApiInviteChannelMember
     */
    readonly invite_channel_member_req_body: InviteChannelMemberReqBody;
}
/**
 * Request parameters for lookupChannel operation in ChannelApi.
 * @export
 * @interface ChannelApiLookupChannelRequest
 */
export interface ChannelApiLookupChannelRequest {
    /**
     * Channel ID for the channel being queried
     *
     *
     * @type {string}
     * @memberof ChannelApiLookupChannel
     */
    readonly id: string;
    /**
     * Type of identifier being used to query the channel. Defaults to ID.
     *
     *
     * @type {ChannelType}
     * @memberof ChannelApiLookupChannel
     */
    readonly type?: ChannelType;
    /**
     * FID of the user viewing the channel.
     *
     *
     * @type {number}
     * @memberof ChannelApiLookupChannel
     */
    readonly viewer_fid?: number;
}
/**
 * Request parameters for removeChannelMember operation in ChannelApi.
 * @export
 * @interface ChannelApiRemoveChannelMemberRequest
 */
export interface ChannelApiRemoveChannelMemberRequest {
    /**
     *
     *
     *
     * @type {RemoveChannelMemberReqBody}
     * @memberof ChannelApiRemoveChannelMember
     */
    readonly remove_channel_member_req_body: RemoveChannelMemberReqBody;
}
/**
 * Request parameters for respondChannelInvite operation in ChannelApi.
 * @export
 * @interface ChannelApiRespondChannelInviteRequest
 */
export interface ChannelApiRespondChannelInviteRequest {
    /**
     *
     *
     *
     * @type {RespondChannelInviteReqBody}
     * @memberof ChannelApiRespondChannelInvite
     */
    readonly respond_channel_invite_req_body: RespondChannelInviteReqBody;
}
/**
 * Request parameters for searchChannels operation in ChannelApi.
 * @export
 * @interface ChannelApiSearchChannelsRequest
 */
export interface ChannelApiSearchChannelsRequest {
    /**
     * Channel ID or name for the channel being queried
     *
     *
     * @type {string}
     * @memberof ChannelApiSearchChannels
     */
    readonly q: string;
    /**
     * Number of results to fetch (Default: 20, Maximum: 200)
     *
     *
     * @type {number}
     * @memberof ChannelApiSearchChannels
     */
    readonly limit?: number;
    /**
     * Pagination cursor.
     *
     *
     * @type {string}
     * @memberof ChannelApiSearchChannels
     */
    readonly cursor?: string;
}
/**
 * Request parameters for unfollowChannel operation in ChannelApi.
 * @export
 * @interface ChannelApiUnfollowChannelRequest
 */
export interface ChannelApiUnfollowChannelRequest {
    /**
     *
     *
     *
     * @type {ChannelFollowReqBody}
     * @memberof ChannelApiUnfollowChannel
     */
    readonly channel_follow_req_body: ChannelFollowReqBody;
}
/**
 * ChannelApi - object-oriented interface
 * @export
 * @class ChannelApi
 * @extends {BaseAPI}
 */
export declare class ChannelApi extends BaseAPI implements ChannelApiInterface {
    /**
     * Returns a list of all channels with their details
     * @summary Fetch all channels with their details
     * @param {ChannelApiFetchAllChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     * @returns {Promise<ChannelListResponse>} A promise that resolves to a `ChannelListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-all-channels)
     *
     */
    fetchAllChannels(requestParameters?: ChannelApiFetchAllChannelsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChannelListResponse, any>>;
    /**
     * Returns details of multiple channels
     * @summary Bulk fetch
     * @param {ChannelApiFetchBulkChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     * @returns {Promise<ChannelResponseBulk>} A promise that resolves to a `ChannelResponseBulk` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-bulk-channels)
     *
     */
    fetchBulkChannels(requestParameters: ChannelApiFetchBulkChannelsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChannelResponseBulk, any>>;
    /**
     * Fetch a list of invites, either in a channel or for a user. If both are provided, open channel invite for that user is returned.
     * @summary Open invites
     * @param {ChannelApiFetchChannelInvitesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     * @returns {Promise<ChannelMemberInviteListResponse>} A promise that resolves to a `ChannelMemberInviteListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-invites)
     *
     */
    fetchChannelInvites(requestParameters?: ChannelApiFetchChannelInvitesRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChannelMemberInviteListResponse, any>>;
    /**
     * Fetch a list of members in a channel
     * @summary Fetch members
     * @param {ChannelApiFetchChannelMembersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     * @returns {Promise<ChannelMemberListResponse>} A promise that resolves to a `ChannelMemberListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-channel-members)
     *
     */
    fetchChannelMembers(requestParameters: ChannelApiFetchChannelMembersRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChannelMemberListResponse, any>>;
    /**
     * Returns a list of followers for a specific channel. Max limit is 1000. Use cursor for pagination.
     * @summary For channel
     * @param {ChannelApiFetchFollowersForAChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     * @returns {Promise<UsersResponse>} A promise that resolves to a `UsersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-followers-for-a-channel)
     *
     */
    fetchFollowersForAChannel(requestParameters: ChannelApiFetchFollowersForAChannelRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UsersResponse, any>>;
    /**
     * Returns a list of relevant channel followers for a specific FID. This usually shows on a channel as \"X, Y, Z follow this channel\".
     * @summary Relevant followers
     * @param {ChannelApiFetchRelevantFollowersForAChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     * @returns {Promise<RelevantFollowersResponse>} A promise that resolves to a `RelevantFollowersResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-relevant-followers-for-a-channel)
     *
     */
    fetchRelevantFollowersForAChannel(requestParameters: ChannelApiFetchRelevantFollowersForAChannelRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<RelevantFollowersResponse, any>>;
    /**
     * Returns a list of trending channels based on activity
     * @summary Channels by activity
     * @param {ChannelApiFetchTrendingChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     * @returns {Promise<TrendingChannelResponse>} A promise that resolves to a `TrendingChannelResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-channels)
     *
     */
    fetchTrendingChannels(requestParameters?: ChannelApiFetchTrendingChannelsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TrendingChannelResponse, any>>;
    /**
     * Returns a list of all channels with their details that an FID is a member of. Data may have a delay of up to 1 hour.
     * @summary Member of
     * @param {ChannelApiFetchUserChannelMembershipsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     * @returns {Promise<ChannelMemberListResponse>} A promise that resolves to a `ChannelMemberListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-channel-memberships)
     *
     */
    fetchUserChannelMemberships(requestParameters: ChannelApiFetchUserChannelMembershipsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChannelMemberListResponse, any>>;
    /**
     * Returns a list of all channels with their details that a FID follows.
     * @summary Following
     * @param {ChannelApiFetchUserChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     * @returns {Promise<ChannelListResponse>} A promise that resolves to a `ChannelListResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-channels)
     *
     */
    fetchUserChannels(requestParameters: ChannelApiFetchUserChannelsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChannelListResponse, any>>;
    /**
     * Fetches all channels that a user has casted in, in reverse chronological order.
     * @summary Fetch channels that user is active in
     * @param {ChannelApiFetchUsersActiveChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     * @returns {Promise<UsersActiveChannelsResponse>} A promise that resolves to a `UsersActiveChannelsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-users-active-channels)
     *
     */
    fetchUsersActiveChannels(requestParameters: ChannelApiFetchUsersActiveChannelsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UsersActiveChannelsResponse, any>>;
    /**
     * Follow a channel
     * @summary Follow a channel
     * @param {ChannelApiFollowChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/follow-channel)
     *
     */
    followChannel(requestParameters: ChannelApiFollowChannelRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OperationResponse, any>>;
    /**
     * Invite a user to a channel
     * @summary Invite
     * @param {ChannelApiInviteChannelMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/invite-channel-member)
     *
     */
    inviteChannelMember(requestParameters: ChannelApiInviteChannelMemberRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OperationResponse, any>>;
    /**
     * Returns details of a channel
     * @summary By ID or parent_url
     * @param {ChannelApiLookupChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     * @returns {Promise<ChannelResponse>} A promise that resolves to a `ChannelResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/lookup-channel)
     *
     */
    lookupChannel(requestParameters: ChannelApiLookupChannelRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChannelResponse, any>>;
    /**
     * Remove a user from a channel or a user\'s invite to a channel role
     * @summary Remove user
     * @param {ChannelApiRemoveChannelMemberRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/remove-channel-member)
     *
     */
    removeChannelMember(requestParameters: ChannelApiRemoveChannelMemberRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OperationResponse, any>>;
    /**
     * Accept or reject a channel invite
     * @summary Accept or reject an invite
     * @param {ChannelApiRespondChannelInviteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/respond-channel-invite)
     *
     */
    respondChannelInvite(requestParameters: ChannelApiRespondChannelInviteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OperationResponse, any>>;
    /**
     * Returns a list of channels based on ID or name
     * @summary Search by ID or name
     * @param {ChannelApiSearchChannelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     * @returns {Promise<ChannelSearchResponse>} A promise that resolves to a `ChannelSearchResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/search-channels)
     *
     */
    searchChannels(requestParameters: ChannelApiSearchChannelsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ChannelSearchResponse, any>>;
    /**
     * Unfollow a channel
     * @summary Unfollow a channel
     * @param {ChannelApiUnfollowChannelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChannelApi
     * @returns {Promise<OperationResponse>} A promise that resolves to a `OperationResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/unfollow-channel)
     *
     */
    unfollowChannel(requestParameters: ChannelApiUnfollowChannelRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<OperationResponse, any>>;
}
/**
 * @export
 */
export declare const FetchTrendingChannelsTimeWindowEnum: {
    readonly _1d: "1d";
    readonly _7d: "7d";
    readonly _30d: "30d";
};
export type FetchTrendingChannelsTimeWindowEnum = typeof FetchTrendingChannelsTimeWindowEnum[keyof typeof FetchTrendingChannelsTimeWindowEnum];
