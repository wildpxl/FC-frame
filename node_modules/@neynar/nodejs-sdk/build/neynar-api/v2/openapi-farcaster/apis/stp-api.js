"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StpApi = exports.StpApiFactory = exports.StpApiFp = exports.StpApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * StpApi - axios parameter creator
 * @export
 */
const StpApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Check if a wallet address is subscribed to a given STP contract.
         * @summary Subscription check by wallet address
         * @param {string} addresses Comma separated list of Ethereum addresses, up to 350 at a time
         * @param {string} contract_address Ethereum address of the STP contract
         * @param {string} chain_id Chain ID of the STP contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<SubscriptionCheckResponse>} A promise that resolves to a `SubscriptionCheckResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscription-check)
         *
         */
        fetchSubscriptionCheck: async (addresses, contract_address, chain_id, options = {}) => {
            // verify required parameter 'addresses' is not null or undefined
            (0, common_1.assertParamExists)('fetchSubscriptionCheck', 'addresses', addresses);
            // verify required parameter 'contract_address' is not null or undefined
            (0, common_1.assertParamExists)('fetchSubscriptionCheck', 'contract_address', contract_address);
            // verify required parameter 'chain_id' is not null or undefined
            (0, common_1.assertParamExists)('fetchSubscriptionCheck', 'chain_id', chain_id);
            const localVarPath = `/stp/subscription_check`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication ApiKeyAuth required
            await (0, common_1.setApiKeyToObject)(localVarHeaderParameter, "x-api-key", configuration);
            if (addresses !== undefined) {
                localVarQueryParameter['addresses'] = addresses;
            }
            if (contract_address !== undefined) {
                localVarQueryParameter['contract_address'] = contract_address;
            }
            if (chain_id !== undefined) {
                localVarQueryParameter['chain_id'] = chain_id;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.StpApiAxiosParamCreator = StpApiAxiosParamCreator;
/**
 * StpApi - functional programming interface
 * @export
 */
const StpApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.StpApiAxiosParamCreator)(configuration);
    return {
        /**
         * Check if a wallet address is subscribed to a given STP contract.
         * @summary Subscription check by wallet address
         * @param {string} addresses Comma separated list of Ethereum addresses, up to 350 at a time
         * @param {string} contract_address Ethereum address of the STP contract
         * @param {string} chain_id Chain ID of the STP contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<SubscriptionCheckResponse>} A promise that resolves to a `SubscriptionCheckResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscription-check)
         *
         */
        async fetchSubscriptionCheck(addresses, contract_address, chain_id, options) {
            var _a, _b, _c;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchSubscriptionCheck(addresses, contract_address, chain_id, options);
            const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
            const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['StpApi.fetchSubscriptionCheck']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
            return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    };
};
exports.StpApiFp = StpApiFp;
/**
 * StpApi - factory interface
 * @export
 */
const StpApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.StpApiFp)(configuration);
    return {
        /**
         * Check if a wallet address is subscribed to a given STP contract.
         * @summary Subscription check by wallet address
         * @param {StpApiFetchSubscriptionCheckRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         * @returns {Promise<SubscriptionCheckResponse>} A promise that resolves to a `SubscriptionCheckResponse` object
         *
         * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscription-check)
         *
         */
        fetchSubscriptionCheck(requestParameters, options) {
            return localVarFp.fetchSubscriptionCheck(requestParameters.addresses, requestParameters.contract_address, requestParameters.chain_id, options).then((request) => request(axios, basePath));
        },
    };
};
exports.StpApiFactory = StpApiFactory;
/**
 * StpApi - object-oriented interface
 * @export
 * @class StpApi
 * @extends {BaseAPI}
 */
class StpApi extends base_1.BaseAPI {
    /**
     * Check if a wallet address is subscribed to a given STP contract.
     * @summary Subscription check by wallet address
     * @param {StpApiFetchSubscriptionCheckRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StpApi
     * @returns {Promise<SubscriptionCheckResponse>} A promise that resolves to a `SubscriptionCheckResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-subscription-check)
     *
     */
    fetchSubscriptionCheck(requestParameters, options) {
        return (0, exports.StpApiFp)(this.configuration).fetchSubscriptionCheck(requestParameters.addresses, requestParameters.contract_address, requestParameters.chain_id, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.StpApi = StpApi;
