/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { FarcasterActionReqBody } from '../models';
/**
 * ActionApi - axios parameter creator
 * @export
 */
export declare const ActionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Securely communicate and perform actions on behalf of users across different apps. It enables an app to send data or trigger actions in another app on behalf of a mutual user by signing messages using the user\'s Farcaster signer.
     * @summary User actions across apps
     * @param {FarcasterActionReqBody} farcaster_action_req_body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<{ [key: string]: any; }>} A promise that resolves to a `{ [key: string]: any; }` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/docs/farcaster-actions-spec)
     *
     */
    publishFarcasterAction: (farcaster_action_req_body: FarcasterActionReqBody, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ActionApi - functional programming interface
 * @export
 */
export declare const ActionApiFp: (configuration?: Configuration) => {
    /**
     * Securely communicate and perform actions on behalf of users across different apps. It enables an app to send data or trigger actions in another app on behalf of a mutual user by signing messages using the user\'s Farcaster signer.
     * @summary User actions across apps
     * @param {FarcasterActionReqBody} farcaster_action_req_body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<{ [key: string]: any; }>} A promise that resolves to a `{ [key: string]: any; }` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/docs/farcaster-actions-spec)
     *
     */
    publishFarcasterAction(farcaster_action_req_body: FarcasterActionReqBody, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{
        [key: string]: any;
    }>>;
};
/**
 * ActionApi - factory interface
 * @export
 */
export declare const ActionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Securely communicate and perform actions on behalf of users across different apps. It enables an app to send data or trigger actions in another app on behalf of a mutual user by signing messages using the user\'s Farcaster signer.
     * @summary User actions across apps
     * @param {ActionApiPublishFarcasterActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<{ [key: string]: any; }>} A promise that resolves to a `{ [key: string]: any; }` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/docs/farcaster-actions-spec)
     *
     */
    publishFarcasterAction(requestParameters: ActionApiPublishFarcasterActionRequest, options?: RawAxiosRequestConfig): AxiosPromise<{
        [key: string]: any;
    }>;
};
/**
 * ActionApi - interface
 * @export
 * @interface ActionApi
 */
export interface ActionApiInterface {
    /**
     * Securely communicate and perform actions on behalf of users across different apps. It enables an app to send data or trigger actions in another app on behalf of a mutual user by signing messages using the user\'s Farcaster signer.
     * @summary User actions across apps
     * @param {ActionApiPublishFarcasterActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApiInterface
     * @returns {Promise<{ [key: string]: any; }>} A promise that resolves to a `{ [key: string]: any; }` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/docs/farcaster-actions-spec)
     *
     */
    publishFarcasterAction(requestParameters: ActionApiPublishFarcasterActionRequest, options?: RawAxiosRequestConfig): AxiosPromise<{
        [key: string]: any;
    }>;
}
/**
 * Request parameters for publishFarcasterAction operation in ActionApi.
 * @export
 * @interface ActionApiPublishFarcasterActionRequest
 */
export interface ActionApiPublishFarcasterActionRequest {
    /**
     *
     *
     *
     * @type {FarcasterActionReqBody}
     * @memberof ActionApiPublishFarcasterAction
     */
    readonly farcaster_action_req_body: FarcasterActionReqBody;
}
/**
 * ActionApi - object-oriented interface
 * @export
 * @class ActionApi
 * @extends {BaseAPI}
 */
export declare class ActionApi extends BaseAPI implements ActionApiInterface {
    /**
     * Securely communicate and perform actions on behalf of users across different apps. It enables an app to send data or trigger actions in another app on behalf of a mutual user by signing messages using the user\'s Farcaster signer.
     * @summary User actions across apps
     * @param {ActionApiPublishFarcasterActionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ActionApi
     * @returns {Promise<{ [key: string]: any; }>} A promise that resolves to a `{ [key: string]: any; }` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/docs/farcaster-actions-spec)
     *
     */
    publishFarcasterAction(requestParameters: ActionApiPublishFarcasterActionRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<{
        [key: string]: any;
    }, any>>;
}
