/**
 * Farcaster API V2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { BulkCastsResponse } from '../models';
import type { EmbedType } from '../models';
import type { FeedResponse } from '../models';
import type { FeedTrendingProvider } from '../models';
import type { FeedType } from '../models';
import type { FilterType } from '../models';
import type { ForYouProvider } from '../models';
/**
 * FeedApi - axios parameter creator
 * @export
 */
export declare const FeedApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel
     * @summary Chronologically
     * @param {number} fid FID of user whose recent casts you want to fetch
     * @param {number} [viewer_fid] FID of the user viewing the feed
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 150)
     * @param {string} [cursor] Pagination cursor
     * @param {boolean} [include_replies] Include reply casts by the author in the response, true by default
     * @param {string} [parent_url] Parent URL to filter the feed; mutually exclusive with channel_id
     * @param {string} [channel_id] Channel ID to filter the feed; mutually exclusive with parent_url
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)
     *
     */
    fetchCastsForUser: (fid: number, viewer_fid?: number, limit?: number, cursor?: string, include_replies?: boolean, parent_url?: string, channel_id?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.
     * @summary By filters
     * @param {FeedType} feed_type Defaults to following (requires FID or address). If set to filter (requires filter_type)
     * @param {FilterType} [filter_type] Used when feed_type&#x3D;filter. Can be set to FIDs (requires FIDs) or parent_url (requires parent_url) or channel_id (requires channel_id)
     * @param {number} [fid] (Optional) FID of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type
     * @param {string} [fids] Used when filter_type&#x3D;FIDs . Create a feed based on a list of FIDs. Max array size is 250. Requires feed_type and filter_type.
     * @param {string} [parent_url] Used when filter_type&#x3D;parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type
     * @param {string} [channel_id] Used when filter_type&#x3D;channel_id can be used to fetch casts under a channel. Requires feed_type and filter_type.
     * @param {boolean} [members_only] Used when filter_type&#x3D;channel_id. Only include casts from members of the channel. True by default.
     * @param {string} [embed_url] Used when filter_type&#x3D;embed_url can be used to fetch all casts with an embed url that contains embed_url. Requires feed_type and filter_type
     * @param {Array<EmbedType>} [embed_types] Used when filter_type&#x3D;embed_types can be used to fetch all casts with matching content types. Requires feed_type and filter_type
     * @param {boolean} [with_recasts] Include recasts in the response, true by default
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)
     *
     */
    fetchFeed: (feed_type: FeedType, filter_type?: FilterType, fid?: number, fids?: string, parent_url?: string, channel_id?: string, members_only?: boolean, embed_url?: string, embed_types?: Array<EmbedType>, with_recasts?: boolean, limit?: number, cursor?: string, viewer_fid?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch feed based on channel IDs
     * @summary By channel IDs
     * @param {string} channel_ids Comma separated list of channel IDs e.g. neynar,farcaster
     * @param {boolean} [with_recasts] Include recasts in the response, true by default
     * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {boolean} [with_replies] Include replies in the response, false by default
     * @param {boolean} [members_only] Only include casts from members of the channel. True by default.
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {boolean} [should_moderate] If true, only casts that have been liked by the moderator (if one exists) will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)
     *
     */
    fetchFeedByChannelIds: (channel_ids: string, with_recasts?: boolean, viewer_fid?: number, with_replies?: boolean, members_only?: boolean, limit?: number, cursor?: string, should_moderate?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch feed based on parent URLs
     * @summary By parent URLs
     * @param {string} parent_urls Comma separated list of parent_urls
     * @param {boolean} [with_recasts] Include recasts in the response, true by default
     * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {boolean} [with_replies] Include replies in the response, false by default
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)
     *
     */
    fetchFeedByParentUrls: (parent_urls: string, with_recasts?: boolean, viewer_fid?: number, with_replies?: boolean, limit?: number, cursor?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch a personalized For You feed for a user
     * @summary For you
     * @param {number} fid FID of user whose feed you want to create
     * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {ForYouProvider} [provider]
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 50)
     * @param {string} [cursor] Pagination cursor.
     * @param {string} [provider_metadata] provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)
     *
     */
    fetchFeedForYou: (fid: number, viewer_fid?: number, provider?: ForYouProvider, limit?: number, cursor?: string, provider_metadata?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch feed of casts with Frames, reverse chronological order
     * @summary Casts with Frames
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)
     *
     */
    fetchFramesOnlyFeed: (limit?: number, viewer_fid?: number, cursor?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
     * @summary 10 most popular casts
     * @param {number} fid FID of user whose feed you want to create
     * @param {number} [viewer_fid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)
     *
     */
    fetchPopularCastsByUser: (fid: number, viewer_fid?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch recent replies and recasts for a given user FID; sorted by most recent first
     * @summary Replies and recasts
     * @param {number} fid FID of user whose replies and recasts you want to fetch
     * @param {FetchRepliesAndRecastsForUserFilterEnum} [filter] filter to fetch only replies or recasts
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 50)
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)
     *
     */
    fetchRepliesAndRecastsForUser: (fid: number, filter?: FetchRepliesAndRecastsForUserFilterEnum, limit?: number, cursor?: string, viewer_fid?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.
     * @summary Trending casts
     * @param {number} [limit] Number of results to fetch  (Default: 10, Maximum: 10)
     * @param {string} [cursor] Pagination cursor
     * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {FetchTrendingFeedTimeWindowEnum} [time_window] Time window for trending casts (7d window for channel feeds only)
     * @param {string} [channel_id] Channel ID to filter trending casts. Less active channels might have no casts in the time window selected.
     * @param {FeedTrendingProvider} [provider] The provider of the trending casts feed.
     * @param {string} [provider_metadata] provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)
     *
     */
    fetchTrendingFeed: (limit?: number, cursor?: string, viewer_fid?: number, time_window?: FetchTrendingFeedTimeWindowEnum, channel_id?: string, provider?: FeedTrendingProvider, provider_metadata?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetch feed based on who a user is following
     * @summary Following
     * @param {number} fid FID of user whose feed you want to create
     * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {boolean} [with_recasts] Include recasts in the response, true by default
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)
     *
     */
    fetchUserFollowingFeed: (fid: number, viewer_fid?: number, with_recasts?: boolean, limit?: number, cursor?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FeedApi - functional programming interface
 * @export
 */
export declare const FeedApiFp: (configuration?: Configuration) => {
    /**
     * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel
     * @summary Chronologically
     * @param {number} fid FID of user whose recent casts you want to fetch
     * @param {number} [viewer_fid] FID of the user viewing the feed
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 150)
     * @param {string} [cursor] Pagination cursor
     * @param {boolean} [include_replies] Include reply casts by the author in the response, true by default
     * @param {string} [parent_url] Parent URL to filter the feed; mutually exclusive with channel_id
     * @param {string} [channel_id] Channel ID to filter the feed; mutually exclusive with parent_url
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)
     *
     */
    fetchCastsForUser(fid: number, viewer_fid?: number, limit?: number, cursor?: string, include_replies?: boolean, parent_url?: string, channel_id?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
    /**
     * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.
     * @summary By filters
     * @param {FeedType} feed_type Defaults to following (requires FID or address). If set to filter (requires filter_type)
     * @param {FilterType} [filter_type] Used when feed_type&#x3D;filter. Can be set to FIDs (requires FIDs) or parent_url (requires parent_url) or channel_id (requires channel_id)
     * @param {number} [fid] (Optional) FID of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type
     * @param {string} [fids] Used when filter_type&#x3D;FIDs . Create a feed based on a list of FIDs. Max array size is 250. Requires feed_type and filter_type.
     * @param {string} [parent_url] Used when filter_type&#x3D;parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type
     * @param {string} [channel_id] Used when filter_type&#x3D;channel_id can be used to fetch casts under a channel. Requires feed_type and filter_type.
     * @param {boolean} [members_only] Used when filter_type&#x3D;channel_id. Only include casts from members of the channel. True by default.
     * @param {string} [embed_url] Used when filter_type&#x3D;embed_url can be used to fetch all casts with an embed url that contains embed_url. Requires feed_type and filter_type
     * @param {Array<EmbedType>} [embed_types] Used when filter_type&#x3D;embed_types can be used to fetch all casts with matching content types. Requires feed_type and filter_type
     * @param {boolean} [with_recasts] Include recasts in the response, true by default
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)
     *
     */
    fetchFeed(feed_type: FeedType, filter_type?: FilterType, fid?: number, fids?: string, parent_url?: string, channel_id?: string, members_only?: boolean, embed_url?: string, embed_types?: Array<EmbedType>, with_recasts?: boolean, limit?: number, cursor?: string, viewer_fid?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
    /**
     * Fetch feed based on channel IDs
     * @summary By channel IDs
     * @param {string} channel_ids Comma separated list of channel IDs e.g. neynar,farcaster
     * @param {boolean} [with_recasts] Include recasts in the response, true by default
     * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {boolean} [with_replies] Include replies in the response, false by default
     * @param {boolean} [members_only] Only include casts from members of the channel. True by default.
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {boolean} [should_moderate] If true, only casts that have been liked by the moderator (if one exists) will be returned.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)
     *
     */
    fetchFeedByChannelIds(channel_ids: string, with_recasts?: boolean, viewer_fid?: number, with_replies?: boolean, members_only?: boolean, limit?: number, cursor?: string, should_moderate?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
    /**
     * Fetch feed based on parent URLs
     * @summary By parent URLs
     * @param {string} parent_urls Comma separated list of parent_urls
     * @param {boolean} [with_recasts] Include recasts in the response, true by default
     * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {boolean} [with_replies] Include replies in the response, false by default
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)
     *
     */
    fetchFeedByParentUrls(parent_urls: string, with_recasts?: boolean, viewer_fid?: number, with_replies?: boolean, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
    /**
     * Fetch a personalized For You feed for a user
     * @summary For you
     * @param {number} fid FID of user whose feed you want to create
     * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {ForYouProvider} [provider]
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 50)
     * @param {string} [cursor] Pagination cursor.
     * @param {string} [provider_metadata] provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)
     *
     */
    fetchFeedForYou(fid: number, viewer_fid?: number, provider?: ForYouProvider, limit?: number, cursor?: string, provider_metadata?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
    /**
     * Fetch feed of casts with Frames, reverse chronological order
     * @summary Casts with Frames
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)
     *
     */
    fetchFramesOnlyFeed(limit?: number, viewer_fid?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
    /**
     * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
     * @summary 10 most popular casts
     * @param {number} fid FID of user whose feed you want to create
     * @param {number} [viewer_fid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)
     *
     */
    fetchPopularCastsByUser(fid: number, viewer_fid?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BulkCastsResponse>>;
    /**
     * Fetch recent replies and recasts for a given user FID; sorted by most recent first
     * @summary Replies and recasts
     * @param {number} fid FID of user whose replies and recasts you want to fetch
     * @param {FetchRepliesAndRecastsForUserFilterEnum} [filter] filter to fetch only replies or recasts
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 50)
     * @param {string} [cursor] Pagination cursor.
     * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)
     *
     */
    fetchRepliesAndRecastsForUser(fid: number, filter?: FetchRepliesAndRecastsForUserFilterEnum, limit?: number, cursor?: string, viewer_fid?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
    /**
     * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.
     * @summary Trending casts
     * @param {number} [limit] Number of results to fetch  (Default: 10, Maximum: 10)
     * @param {string} [cursor] Pagination cursor
     * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {FetchTrendingFeedTimeWindowEnum} [time_window] Time window for trending casts (7d window for channel feeds only)
     * @param {string} [channel_id] Channel ID to filter trending casts. Less active channels might have no casts in the time window selected.
     * @param {FeedTrendingProvider} [provider] The provider of the trending casts feed.
     * @param {string} [provider_metadata] provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)
     *
     */
    fetchTrendingFeed(limit?: number, cursor?: string, viewer_fid?: number, time_window?: FetchTrendingFeedTimeWindowEnum, channel_id?: string, provider?: FeedTrendingProvider, provider_metadata?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
    /**
     * Fetch feed based on who a user is following
     * @summary Following
     * @param {number} fid FID of user whose feed you want to create
     * @param {number} [viewer_fid] Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     * @param {boolean} [with_recasts] Include recasts in the response, true by default
     * @param {number} [limit] Number of results to fetch  (Default: 25, Maximum: 100)
     * @param {string} [cursor] Pagination cursor.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)
     *
     */
    fetchUserFollowingFeed(fid: number, viewer_fid?: number, with_recasts?: boolean, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>>;
};
/**
 * FeedApi - factory interface
 * @export
 */
export declare const FeedApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel
     * @summary Chronologically
     * @param {FeedApiFetchCastsForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)
     *
     */
    fetchCastsForUser(requestParameters: FeedApiFetchCastsForUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.
     * @summary By filters
     * @param {FeedApiFetchFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)
     *
     */
    fetchFeed(requestParameters: FeedApiFetchFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch feed based on channel IDs
     * @summary By channel IDs
     * @param {FeedApiFetchFeedByChannelIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)
     *
     */
    fetchFeedByChannelIds(requestParameters: FeedApiFetchFeedByChannelIdsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch feed based on parent URLs
     * @summary By parent URLs
     * @param {FeedApiFetchFeedByParentUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)
     *
     */
    fetchFeedByParentUrls(requestParameters: FeedApiFetchFeedByParentUrlsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch a personalized For You feed for a user
     * @summary For you
     * @param {FeedApiFetchFeedForYouRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)
     *
     */
    fetchFeedForYou(requestParameters: FeedApiFetchFeedForYouRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch feed of casts with Frames, reverse chronological order
     * @summary Casts with Frames
     * @param {FeedApiFetchFramesOnlyFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)
     *
     */
    fetchFramesOnlyFeed(requestParameters?: FeedApiFetchFramesOnlyFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
     * @summary 10 most popular casts
     * @param {FeedApiFetchPopularCastsByUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)
     *
     */
    fetchPopularCastsByUser(requestParameters: FeedApiFetchPopularCastsByUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<BulkCastsResponse>;
    /**
     * Fetch recent replies and recasts for a given user FID; sorted by most recent first
     * @summary Replies and recasts
     * @param {FeedApiFetchRepliesAndRecastsForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)
     *
     */
    fetchRepliesAndRecastsForUser(requestParameters: FeedApiFetchRepliesAndRecastsForUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.
     * @summary Trending casts
     * @param {FeedApiFetchTrendingFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)
     *
     */
    fetchTrendingFeed(requestParameters?: FeedApiFetchTrendingFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch feed based on who a user is following
     * @summary Following
     * @param {FeedApiFetchUserFollowingFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)
     *
     */
    fetchUserFollowingFeed(requestParameters: FeedApiFetchUserFollowingFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
};
/**
 * FeedApi - interface
 * @export
 * @interface FeedApi
 */
export interface FeedApiInterface {
    /**
     * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel
     * @summary Chronologically
     * @param {FeedApiFetchCastsForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)
     *
     */
    fetchCastsForUser(requestParameters: FeedApiFetchCastsForUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.
     * @summary By filters
     * @param {FeedApiFetchFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)
     *
     */
    fetchFeed(requestParameters: FeedApiFetchFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch feed based on channel IDs
     * @summary By channel IDs
     * @param {FeedApiFetchFeedByChannelIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)
     *
     */
    fetchFeedByChannelIds(requestParameters: FeedApiFetchFeedByChannelIdsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch feed based on parent URLs
     * @summary By parent URLs
     * @param {FeedApiFetchFeedByParentUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)
     *
     */
    fetchFeedByParentUrls(requestParameters: FeedApiFetchFeedByParentUrlsRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch a personalized For You feed for a user
     * @summary For you
     * @param {FeedApiFetchFeedForYouRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)
     *
     */
    fetchFeedForYou(requestParameters: FeedApiFetchFeedForYouRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch feed of casts with Frames, reverse chronological order
     * @summary Casts with Frames
     * @param {FeedApiFetchFramesOnlyFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)
     *
     */
    fetchFramesOnlyFeed(requestParameters?: FeedApiFetchFramesOnlyFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
     * @summary 10 most popular casts
     * @param {FeedApiFetchPopularCastsByUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)
     *
     */
    fetchPopularCastsByUser(requestParameters: FeedApiFetchPopularCastsByUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<BulkCastsResponse>;
    /**
     * Fetch recent replies and recasts for a given user FID; sorted by most recent first
     * @summary Replies and recasts
     * @param {FeedApiFetchRepliesAndRecastsForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)
     *
     */
    fetchRepliesAndRecastsForUser(requestParameters: FeedApiFetchRepliesAndRecastsForUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.
     * @summary Trending casts
     * @param {FeedApiFetchTrendingFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)
     *
     */
    fetchTrendingFeed(requestParameters?: FeedApiFetchTrendingFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
    /**
     * Fetch feed based on who a user is following
     * @summary Following
     * @param {FeedApiFetchUserFollowingFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApiInterface
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)
     *
     */
    fetchUserFollowingFeed(requestParameters: FeedApiFetchUserFollowingFeedRequest, options?: RawAxiosRequestConfig): AxiosPromise<FeedResponse>;
}
/**
 * Request parameters for fetchCastsForUser operation in FeedApi.
 * @export
 * @interface FeedApiFetchCastsForUserRequest
 */
export interface FeedApiFetchCastsForUserRequest {
    /**
     * FID of user whose recent casts you want to fetch
     *
     *
     * @type {number}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly fid: number;
    /**
     * FID of the user viewing the feed
     *
     *
     * @type {number}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly viewer_fid?: number;
    /**
     * Number of results to fetch (Default: 25, Maximum: 150)
     *
     *
     * @type {number}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly limit?: number;
    /**
     * Pagination cursor
     *
     *
     * @type {string}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly cursor?: string;
    /**
     * Include reply casts by the author in the response, true by default
     *
     *
     * @type {boolean}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly include_replies?: boolean;
    /**
     * Parent URL to filter the feed; mutually exclusive with channel_id
     *
     *
     * @type {string}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly parent_url?: string;
    /**
     * Channel ID to filter the feed; mutually exclusive with parent_url
     *
     *
     * @type {string}
     * @memberof FeedApiFetchCastsForUser
     */
    readonly channel_id?: string;
}
/**
 * Request parameters for fetchFeed operation in FeedApi.
 * @export
 * @interface FeedApiFetchFeedRequest
 */
export interface FeedApiFetchFeedRequest {
    /**
     * Defaults to following (requires FID or address). If set to filter (requires filter_type)
     *
     *
     * @type {FeedType}
     * @memberof FeedApiFetchFeed
     */
    readonly feed_type: FeedType;
    /**
     * Used when feed_type&#x3D;filter. Can be set to FIDs (requires FIDs) or parent_url (requires parent_url) or channel_id (requires channel_id)
     *
     *
     * @type {FilterType}
     * @memberof FeedApiFetchFeed
     */
    readonly filter_type?: FilterType;
    /**
     * (Optional) FID of user whose feed you want to create. By default, the API expects this field, except if you pass a filter_type
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFeed
     */
    readonly fid?: number;
    /**
     * Used when filter_type&#x3D;FIDs . Create a feed based on a list of FIDs. Max array size is 250. Requires feed_type and filter_type.
     *
     *
     * @type {string}
     * @memberof FeedApiFetchFeed
     */
    readonly fids?: string;
    /**
     * Used when filter_type&#x3D;parent_url can be used to fetch content under any parent url e.g. FIP-2 channels on Warpcast. Requires feed_type and filter_type
     *
     *
     * @type {string}
     * @memberof FeedApiFetchFeed
     */
    readonly parent_url?: string;
    /**
     * Used when filter_type&#x3D;channel_id can be used to fetch casts under a channel. Requires feed_type and filter_type.
     *
     *
     * @type {string}
     * @memberof FeedApiFetchFeed
     */
    readonly channel_id?: string;
    /**
     * Used when filter_type&#x3D;channel_id. Only include casts from members of the channel. True by default.
     *
     *
     * @type {boolean}
     * @memberof FeedApiFetchFeed
     */
    readonly members_only?: boolean;
    /**
     * Used when filter_type&#x3D;embed_url can be used to fetch all casts with an embed url that contains embed_url. Requires feed_type and filter_type
     *
     *
     * @type {string}
     * @memberof FeedApiFetchFeed
     */
    readonly embed_url?: string;
    /**
     * Used when filter_type&#x3D;embed_types can be used to fetch all casts with matching content types. Requires feed_type and filter_type
     *
     *
     * @type {Array<EmbedType>}
     * @memberof FeedApiFetchFeed
     */
    readonly embed_types?: Array<EmbedType>;
    /**
     * Include recasts in the response, true by default
     *
     *
     * @type {boolean}
     * @memberof FeedApiFetchFeed
     */
    readonly with_recasts?: boolean;
    /**
     * Number of results to fetch (Default: 25, Maximum: 100)
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFeed
     */
    readonly limit?: number;
    /**
     * Pagination cursor.
     *
     *
     * @type {string}
     * @memberof FeedApiFetchFeed
     */
    readonly cursor?: string;
    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFeed
     */
    readonly viewer_fid?: number;
}
/**
 * Request parameters for fetchFeedByChannelIds operation in FeedApi.
 * @export
 * @interface FeedApiFetchFeedByChannelIdsRequest
 */
export interface FeedApiFetchFeedByChannelIdsRequest {
    /**
     * Comma separated list of channel IDs e.g. neynar,farcaster
     *
     * @commaSeparated
     * @type {string}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly channel_ids: string;
    /**
     * Include recasts in the response, true by default
     *
     *
     * @type {boolean}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly with_recasts?: boolean;
    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly viewer_fid?: number;
    /**
     * Include replies in the response, false by default
     *
     *
     * @type {boolean}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly with_replies?: boolean;
    /**
     * Only include casts from members of the channel. True by default.
     *
     *
     * @type {boolean}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly members_only?: boolean;
    /**
     * Number of results to fetch (Default: 25, Maximum: 100)
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly limit?: number;
    /**
     * Pagination cursor.
     *
     *
     * @type {string}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly cursor?: string;
    /**
     * If true, only casts that have been liked by the moderator (if one exists) will be returned.
     *
     *
     * @type {boolean}
     * @memberof FeedApiFetchFeedByChannelIds
     */
    readonly should_moderate?: boolean;
}
/**
 * Request parameters for fetchFeedByParentUrls operation in FeedApi.
 * @export
 * @interface FeedApiFetchFeedByParentUrlsRequest
 */
export interface FeedApiFetchFeedByParentUrlsRequest {
    /**
     * Comma separated list of parent_urls
     *
     * @commaSeparated
     * @type {string}
     * @memberof FeedApiFetchFeedByParentUrls
     */
    readonly parent_urls: string;
    /**
     * Include recasts in the response, true by default
     *
     *
     * @type {boolean}
     * @memberof FeedApiFetchFeedByParentUrls
     */
    readonly with_recasts?: boolean;
    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFeedByParentUrls
     */
    readonly viewer_fid?: number;
    /**
     * Include replies in the response, false by default
     *
     *
     * @type {boolean}
     * @memberof FeedApiFetchFeedByParentUrls
     */
    readonly with_replies?: boolean;
    /**
     * Number of results to fetch (Default: 25, Maximum: 100)
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFeedByParentUrls
     */
    readonly limit?: number;
    /**
     * Pagination cursor.
     *
     *
     * @type {string}
     * @memberof FeedApiFetchFeedByParentUrls
     */
    readonly cursor?: string;
}
/**
 * Request parameters for fetchFeedForYou operation in FeedApi.
 * @export
 * @interface FeedApiFetchFeedForYouRequest
 */
export interface FeedApiFetchFeedForYouRequest {
    /**
     * FID of user whose feed you want to create
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFeedForYou
     */
    readonly fid: number;
    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFeedForYou
     */
    readonly viewer_fid?: number;
    /**
     *
     *
     *
     * @type {ForYouProvider}
     * @memberof FeedApiFetchFeedForYou
     */
    readonly provider?: ForYouProvider;
    /**
     * Number of results to fetch (Default: 25, Maximum: 50)
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFeedForYou
     */
    readonly limit?: number;
    /**
     * Pagination cursor.
     *
     *
     * @type {string}
     * @memberof FeedApiFetchFeedForYou
     */
    readonly cursor?: string;
    /**
     * provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.
     *
     *
     * @type {string}
     * @memberof FeedApiFetchFeedForYou
     */
    readonly provider_metadata?: string;
}
/**
 * Request parameters for fetchFramesOnlyFeed operation in FeedApi.
 * @export
 * @interface FeedApiFetchFramesOnlyFeedRequest
 */
export interface FeedApiFetchFramesOnlyFeedRequest {
    /**
     * Number of results to fetch (Default: 25, Maximum: 100)
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFramesOnlyFeed
     */
    readonly limit?: number;
    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     *
     *
     * @type {number}
     * @memberof FeedApiFetchFramesOnlyFeed
     */
    readonly viewer_fid?: number;
    /**
     * Pagination cursor.
     *
     *
     * @type {string}
     * @memberof FeedApiFetchFramesOnlyFeed
     */
    readonly cursor?: string;
}
/**
 * Request parameters for fetchPopularCastsByUser operation in FeedApi.
 * @export
 * @interface FeedApiFetchPopularCastsByUserRequest
 */
export interface FeedApiFetchPopularCastsByUserRequest {
    /**
     * FID of user whose feed you want to create
     *
     *
     * @type {number}
     * @memberof FeedApiFetchPopularCastsByUser
     */
    readonly fid: number;
    /**
     *
     *
     *
     * @type {number}
     * @memberof FeedApiFetchPopularCastsByUser
     */
    readonly viewer_fid?: number;
}
/**
 * Request parameters for fetchRepliesAndRecastsForUser operation in FeedApi.
 * @export
 * @interface FeedApiFetchRepliesAndRecastsForUserRequest
 */
export interface FeedApiFetchRepliesAndRecastsForUserRequest {
    /**
     * FID of user whose replies and recasts you want to fetch
     *
     *
     * @type {number}
     * @memberof FeedApiFetchRepliesAndRecastsForUser
     */
    readonly fid: number;
    /**
     * filter to fetch only replies or recasts
     *
     *
     * @type {'replies' | 'recasts' | 'all'}
     * @memberof FeedApiFetchRepliesAndRecastsForUser
     */
    readonly filter?: FetchRepliesAndRecastsForUserFilterEnum;
    /**
     * Number of results to fetch (Default: 25, Maximum: 50)
     *
     *
     * @type {number}
     * @memberof FeedApiFetchRepliesAndRecastsForUser
     */
    readonly limit?: number;
    /**
     * Pagination cursor.
     *
     *
     * @type {string}
     * @memberof FeedApiFetchRepliesAndRecastsForUser
     */
    readonly cursor?: string;
    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     *
     *
     * @type {number}
     * @memberof FeedApiFetchRepliesAndRecastsForUser
     */
    readonly viewer_fid?: number;
}
/**
 * Request parameters for fetchTrendingFeed operation in FeedApi.
 * @export
 * @interface FeedApiFetchTrendingFeedRequest
 */
export interface FeedApiFetchTrendingFeedRequest {
    /**
     * Number of results to fetch (Default: 10, Maximum: 10)
     *
     *
     * @type {number}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly limit?: number;
    /**
     * Pagination cursor
     *
     *
     * @type {string}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly cursor?: string;
    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     *
     *
     * @type {number}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly viewer_fid?: number;
    /**
     * Time window for trending casts (7d window for channel feeds only)
     *
     *
     * @type {'1h' | '6h' | '12h' | '24h' | '7d'}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly time_window?: FetchTrendingFeedTimeWindowEnum;
    /**
     * Channel ID to filter trending casts. Less active channels might have no casts in the time window selected.
     *
     *
     * @type {string}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly channel_id?: string;
    /**
     * The provider of the trending casts feed.
     *
     *
     * @type {FeedTrendingProvider}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly provider?: FeedTrendingProvider;
    /**
     * provider_metadata is a URI-encoded stringified JSON object that can be used to pass additional metadata to the provider. Only available for mbd provider right now. See [here](https://docs.neynar.com/docs/feed-for-you-w-external-providers) on how to use.
     *
     *
     * @type {string}
     * @memberof FeedApiFetchTrendingFeed
     */
    readonly provider_metadata?: string;
}
/**
 * Request parameters for fetchUserFollowingFeed operation in FeedApi.
 * @export
 * @interface FeedApiFetchUserFollowingFeedRequest
 */
export interface FeedApiFetchUserFollowingFeedRequest {
    /**
     * FID of user whose feed you want to create
     *
     *
     * @type {number}
     * @memberof FeedApiFetchUserFollowingFeed
     */
    readonly fid: number;
    /**
     * Providing this will return a feed that respects this user\&#39;s mutes and blocks and includes &#x60;viewer_context&#x60;.
     *
     *
     * @type {number}
     * @memberof FeedApiFetchUserFollowingFeed
     */
    readonly viewer_fid?: number;
    /**
     * Include recasts in the response, true by default
     *
     *
     * @type {boolean}
     * @memberof FeedApiFetchUserFollowingFeed
     */
    readonly with_recasts?: boolean;
    /**
     * Number of results to fetch (Default: 25, Maximum: 100)
     *
     *
     * @type {number}
     * @memberof FeedApiFetchUserFollowingFeed
     */
    readonly limit?: number;
    /**
     * Pagination cursor.
     *
     *
     * @type {string}
     * @memberof FeedApiFetchUserFollowingFeed
     */
    readonly cursor?: string;
}
/**
 * FeedApi - object-oriented interface
 * @export
 * @class FeedApi
 * @extends {BaseAPI}
 */
export declare class FeedApi extends BaseAPI implements FeedApiInterface {
    /**
     * Fetch casts for a given user FID in reverse chronological order. Also allows filtering by parent_url and channel
     * @summary Chronologically
     * @param {FeedApiFetchCastsForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-casts-for-user)
     *
     */
    fetchCastsForUser(requestParameters: FeedApiFetchCastsForUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
    /**
     * Fetch casts based on filters. Ensure setting the correct parameters based on the feed_type and filter_type.
     * @summary By filters
     * @param {FeedApiFetchFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed)
     *
     */
    fetchFeed(requestParameters: FeedApiFetchFeedRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
    /**
     * Fetch feed based on channel IDs
     * @summary By channel IDs
     * @param {FeedApiFetchFeedByChannelIdsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-channel-ids)
     *
     */
    fetchFeedByChannelIds(requestParameters: FeedApiFetchFeedByChannelIdsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
    /**
     * Fetch feed based on parent URLs
     * @summary By parent URLs
     * @param {FeedApiFetchFeedByParentUrlsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-by-parent-urls)
     *
     */
    fetchFeedByParentUrls(requestParameters: FeedApiFetchFeedByParentUrlsRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
    /**
     * Fetch a personalized For You feed for a user
     * @summary For you
     * @param {FeedApiFetchFeedForYouRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-feed-for-you)
     *
     */
    fetchFeedForYou(requestParameters: FeedApiFetchFeedForYouRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
    /**
     * Fetch feed of casts with Frames, reverse chronological order
     * @summary Casts with Frames
     * @param {FeedApiFetchFramesOnlyFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-frames-only-feed)
     *
     */
    fetchFramesOnlyFeed(requestParameters?: FeedApiFetchFramesOnlyFeedRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
    /**
     * Fetch 10 most popular casts for a given user FID; popularity based on replies, likes and recasts; sorted by most popular first
     * @summary 10 most popular casts
     * @param {FeedApiFetchPopularCastsByUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<BulkCastsResponse>} A promise that resolves to a `BulkCastsResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-popular-casts-by-user)
     *
     */
    fetchPopularCastsByUser(requestParameters: FeedApiFetchPopularCastsByUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BulkCastsResponse, any>>;
    /**
     * Fetch recent replies and recasts for a given user FID; sorted by most recent first
     * @summary Replies and recasts
     * @param {FeedApiFetchRepliesAndRecastsForUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-replies-and-recasts-for-user)
     *
     */
    fetchRepliesAndRecastsForUser(requestParameters: FeedApiFetchRepliesAndRecastsForUserRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
    /**
     * Fetch trending casts or on the global feed or channels feeds. 7d time window available for channel feeds only.
     * @summary Trending casts
     * @param {FeedApiFetchTrendingFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-trending-feed)
     *
     */
    fetchTrendingFeed(requestParameters?: FeedApiFetchTrendingFeedRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
    /**
     * Fetch feed based on who a user is following
     * @summary Following
     * @param {FeedApiFetchUserFollowingFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeedApi
     * @returns {Promise<FeedResponse>} A promise that resolves to a `FeedResponse` object
     *
     * For more information, refer to the [API documentation](https://docs.neynar.com/reference/fetch-user-following-feed)
     *
     */
    fetchUserFollowingFeed(requestParameters: FeedApiFetchUserFollowingFeedRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FeedResponse, any>>;
}
/**
 * @export
 */
export declare const FetchRepliesAndRecastsForUserFilterEnum: {
    readonly Replies: "replies";
    readonly Recasts: "recasts";
    readonly All: "all";
};
export type FetchRepliesAndRecastsForUserFilterEnum = typeof FetchRepliesAndRecastsForUserFilterEnum[keyof typeof FetchRepliesAndRecastsForUserFilterEnum];
/**
 * @export
 */
export declare const FetchTrendingFeedTimeWindowEnum: {
    readonly _1h: "1h";
    readonly _6h: "6h";
    readonly _12h: "12h";
    readonly _24h: "24h";
    readonly _7d: "7d";
};
export type FetchTrendingFeedTimeWindowEnum = typeof FetchTrendingFeedTimeWindowEnum[keyof typeof FetchTrendingFeedTimeWindowEnum];
